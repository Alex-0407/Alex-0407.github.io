<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ionic3-awesome]]></title>
    <url>%2Fmini-blog%2F2018%2F06%2F01%2Fionic3-awesome%2F</url>
    <content type="text"><![CDATA[简介 About此项目是ionic3开源项目 。贡献代码请提供email。 技术栈ionic3 + cordova 项目运行12345678910111213git clone https://github.com/Alex-0407/ionic3-awesomecd ionic3-awesome npm installionic serve (运行开发模式)浏览器打开: http://localhost:8080ionic cordova run build android (安卓打包发布)ionic cordova run build ios (安卓打包发布) 未完待续 demo演示]]></content>
      <categories>
        <category>ionic</category>
      </categories>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ionic demo]]></title>
    <url>%2Fmini-blog%2F2018%2F05%2F31%2Fionic-for100%2F</url>
    <content type="text"><![CDATA[简介 一个基于ionic的demo。 demo演示]]></content>
      <categories>
        <category>ionic</category>
      </categories>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs搭建web服务]]></title>
    <url>%2Fmini-blog%2F2016%2F10%2F25%2Fnodejs%E6%90%AD%E5%BB%BAweb%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[安装nodejs、npm安装成功之后，使用命令测试是否成功： 1234$ node -vv6.10.2 1234$ npm -v5.3.0 初始化项目配置在chat文件夹下执行初始化命令来获取package.json文件，如果你自己能记住也是可以手写的 12345678910111213141516171819202122232425$ npm initpackage name: (20171022)version: (1.0.0)description:entry point: (index.js)test command:git repository:keywords:author:license: (ISC)About to write to C:\Users\Administrator\Desktop\20171022\package.json:&#123; "name": "20171022", "version": "1.0.0", "description": "", "main": "index.js", "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" &#125;, "author": "", "license": "ISC"&#125; web服务需要引用的模块http模块(http协议)12$ npm install http --save-dev 12var url = require('http'); Node中提供了http模块，其中封装了高效的http服务器和http客户端http.server是一个基于事件的HTTP服务器，内部是由c++实现的，接口由JavaScript封装http.request是一个HTTP客户端工具。用户向服务器发送数据。 @Helios_nannanblog.csdn.net/woshinannan741/article/details/51357464 url模块(url解析)12$ npm install url --save-dev 1var url = require('url'); This module has utilities for URL resolution and parsing meant to have feature parity with node.js core url module. @npmwww.npmjs.com/package/url fs模块(文件系统)12$ npm install fs --save-dev 1var fs = require("fs"); Node.js 文件系统封装在 fs 模块是中，它提供了文件的读取、写入、更名、删除、遍历目录、链接等POSIX 文件系统操作。 与其他模块不同的是，fs 模块中所有的操作都提供了异步的和 同步的两个版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。我们以几个函数为代表，介绍 fs 常用的功能，并列出 fs 所有函数 的定义和功能。 @平凡www.cnblogs.com/pingfan1990/p/4707317.html path模块(路径解析)12$ npm install path --save-dev 1var path = require("path"); This is an exact copy of the NodeJS ’path’ module published to the NPM registry. @npmwww.npmjs.com/package/path 构建一个基于nodejs的web服务器新建一个index.html 123456789&lt;html&gt;&lt;head&gt;&lt;title&gt;Sample Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;/body&gt;&lt;/html&gt; 新建一个webserver.js 1234567891011121314151617181920212223242526272829303132333435var http = require('http');var fs = require('fs');var url = require('url');// 创建服务器http.createServer( function (request, response) &#123; // 解析请求，包括文件名 var pathname = url.parse(request.url).pathname; // 输出请求的文件名 console.log("Request for " + pathname + " received."); // 从文件系统中读取请求的文件内容 fs.readFile(pathname.substr(1), function (err, data) &#123; if (err) &#123; console.log(err); // HTTP 状态码: 404 : NOT FOUND // Content Type: text/plain response.writeHead(404, &#123;'Content-Type': 'text/html'&#125;); &#125;else&#123; // HTTP 状态码: 200 : OK // Content Type: text/plain response.writeHead(200, &#123;'Content-Type': 'text/html'&#125;); // 响应文件内容 response.write(data.toString()); &#125; // 发送响应数据 response.end(); &#125;);&#125;).listen(8081);// 控制台会输出以下信息console.log('Server running at http://127.0.0.1:8081/'); 安装用到的模块到本地项目中： 12345678$ npm install path --save-dev$ npm install fs --save-dev$ npm install http --save-dev$ npm install url --save-dev 安装成功之后执行命令 12$ node webserver 在浏览器起中打开：http://127.0.0.1:8081/ 即可查看效果： ExpressExpress is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. @expressexpressjs.com express API地址：http://www.expressjs.com.cn/4x/api.html 创建一个文件夹express+nodejs，执行初始化项目操作，在项目上安装express 12$ npm install express --save 并且新建index.js、index.html文件 123456789var express = require('express');var app = express();app.get('/', function(req, res)&#123; res.send('hello world2');&#125;);app.listen(3000); 123456789&lt;html&gt;&lt;head&gt;&lt;title&gt;Sample Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;/body&gt;&lt;/html&gt; 在命令行中执行：12$ node index 如果提示listen EADDRINUSE :::3000就说明端口被占用了，可以换成其他端口 123456789101112Error: listen EADDRINUSE :::3000 at Object.exports._errnoException (util.js:1018:11) at exports._exceptionWithHostPort (util.js:1041:20) at Server._listen2 (net.js:1262:14) at listen (net.js:1298:10) at Server.listen (net.js:1394:5) at EventEmitter.listen (E:\工作\workpace\Express\node_modules\express\lib\application.js:618:24) at Object.&lt;anonymous&gt; (E:\工作\workpace\Express\index.js:8:5) at Module._compile (module.js:570:32) at Object.Module._extensions..js (module.js:579:10) at Module.load (module.js:487:32) 在浏览器中打开 http://localhost:3000/ 使用Express加载模版并输出数据未完待续……]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一行代码搭建Hexo站点]]></title>
    <url>%2Fmini-blog%2F2016%2F10%2F23%2F%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BAHexo%E7%AB%99%E7%82%B9%2F</url>
    <content type="text"><![CDATA[初始化Hexo模版引擎 一行代码快速搭建Hexo.NexT主题网站，来吧，趁热打铁一起快速进入学习吧！ 执行安装进入本机E盘Blog目录下 第一步，安装下载Hexo模版，即初始化Hexo模版 第二步，进入blog文件夹，执行安装依赖包 第三步，启动Hexo服务 第四步，打开控制台给出的http地址，http://localhost:4000/ 12345678910npm install hexo-cli -ghexo init blogcd blognpm installhexo server 如果你没有安装npm，请先执行下载安装 安装成功执行 123npm -v 执行以上步骤之后在浏览器中键入http://localhost:4000 即可看到一个初始状态的模版 修改测试端口号如果需要修改端口4000，可以在node-modules文件夹下找到hexo-server模块中的index.js: 12345678910111213141516/* global hexo */&apos;use strict&apos;;var assign = require(&apos;object-assign&apos;);hexo.config.server = assign(&#123; port: 5000,//自行修改端口号 log: false, ip: &apos;0.0.0.0&apos;, compress: false, header: true&#125;, hexo.config.server); 修改之后重新执行hexo server即可: 网站基础配置显示或隐藏Menu菜单在修改菜单之前你首先要弄清楚当前网站使用的皮肤是哪一个，打开网站根目录 config_yml12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape 其中landscape就是你的皮肤框架 然后在网站根目录找到themes/landscape这里面就会有你菜单想的配置，同时这里面也有一个 config_yml，为了区分，我们索性把站点下的配置文件称为站点配置yml，皮肤框架下的配置文件称之为皮肤配置yml OK，打开皮肤配置yml你会看到一些简短的配置，其中第一条就是我们的菜单栏配置 12345# Headermenu: Home: / Archives: /archives 修改Home为主菜单，修改Archives为 文章，刷新浏览器http://localhost:5000 即可看到效果 配置站点基础信息打开站点配置yml 1234567# Sitetitle: 标题subtitle: 副标题description: 描述author: 作者language: zh-Hanstimezone: 刷新浏览器 http://localhost:5000 设置rss在站点根目录执行安装hexo-generator-feed 12npm install hexo-generator-feed --save-dev 在站点配置yml中配置插件，为了快速的找到配置项，可以放到文件的结尾 1234567plugins: hexo-generator-feedfeed: type: atom ##feed类型 atom或者rss2 path: atom.xml ##feed路径 limit: 20 ##feed文章最小数量 点击RSS按钮，会出现如下提示，前提是你的浏览器有rss功能，我本地使用的是rss feed reader： 设置本地全局搜索安装下载hexo-generator-searchdb模块12npm install hexo-generator-searchdb --save-dev 站点配置yml需要配置 123456search: path: search.xml field: post format: html limit: 10000 皮肤配置yml需要配置 123local_search: enable: true 当然你会发现并没有起作用，这是因为当前landscape并不支持本地搜索，后续将介绍NexT主题 使用命令生成静态文件您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。生成的文件在网站public目录下 12hexo generate --deployhexo deploy --generate 可缩写为： 12hexo g -dhexo d -g NexT主题下载安装NexT模版在github上下载NexT主题源码 把NexT主题源码的源码整个复制到你的站点目录下的themes/next目录下 修改站点配置yml来更改主题文章上面有讲到，当前我们的主题使用的是landscape需要修改为next 重新启动服务 刷新页面查看效果 学习并使用NexT主题配置打开next的皮肤配置yml，你会看到很多我们不明白的配置项，根据注释可以读出其中配置的含义。 根据语言配置菜单栏语言打开next皮肤配置yml文件，找到languages文件夹 点开zh-Hans.yml其中的配置项就是已经翻译的文本，网站会根据你站点配置yml中的语言配置来去读取对应的语言文件 打开你next皮肤配置yml你会看到菜单栏基础配置： 12345678910menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 发现home和archives菜单是开启的，现在我们全部开启，只需要去掉前面的#，刷新浏览器 12345678910menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive schedule: /schedule/ || calendar sitemap: /sitemap.xml || sitemap commonweal: /404/ || heartbeat 尝试修改站点配置yml语言，重启服务后刷新浏览器 12language: zh-tw 配置站内搜索安装下载hexo-generator-searchdb模块12npm install hexo-generator-searchdb --save-dev 站点配置yml需要配置 123456search: path: search.xml field: post format: html limit: 10000 皮肤配置yml需要配置 123local_search: enable: true 配置rss配置同见 2.3. 设置rss 配置标签(tags)添加标签其实就是在你的source文件夹下新建一个page页面而已，比如菜单上的tags和about或者categories都是一样的，执行命令 12hexo new page "tags" 会在source目录下生成一个对应的文件夹，其中有index.md文件，打开会看到一些基础配置： 12345---title: tagsdate: 2017-10-24 12:02:51--- 配置分类(categories)12hexo new page "categories" 会在source目录下生成一个对应的文件夹，其中有index.md文件，打开会看到一些基础配置： 1234---title: categoriesdate: 2017-10-24 12:02:51--- 配置站点基础信息配置头像在next皮肤配置yml中可以配置远程地址，也可以是本地资源地址 12345# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: 头像地址 配置站点描述在站点配置yml文件中，找到menu/description就是当前站点的描述 12description: 站点描述 配置第三方跳转链接在next皮肤配置yml中，找到social配置项 12345678910111213social: GitHub: https://github.com/yourname || github E-Mail: mailto:yourname@163.com || envelope QQ: http://wpa.qq.com/msgrd?v=3&amp;uin=yourqq&amp;site=在线客服&amp;menu=yes || qq #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 友情链接在next皮肤配置yml中，找到links配置项 12345678links_icon: linklinks_title: Linkslinks_layout: inlinelinks: friend1: friend2: friend3: 配置阅读次数（使用第三方服务）leancloud作为装逼神器确实不错，可以随意修改当前文章的阅读次数 12345678# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.# 使用第三方服务 LeanCloud 查看文章阅读量leancloud_visitors: enable: true app_id: app_key: 配置评论（使用第三方服务）在disqus官网 http://www.disqus.com 注册一个帐号添加应用之后可获得一个名称，作为你的shortname 123456# Disqusdisqus: enable: true shortname: 你的名称 count: true 配置站点统计（使用第三方服务）百度站点统计 http://tongji.baidu.com/web/welcome/login 1234# Baidu Analytics ID# 注意： baidu_analytics 不是你的百度 id 或者 百度统计 idbaidu_analytics: 327573ae29bff3e49a0152fd0be5e1c2 当前文章是否启用评论配置如果不需要当前页面或这文章不启用评论，则只需要添加以下配置： 123456---title: tagsdate: 2017-10-24 12:02:51comments: false--- 自定义配置在每个文章的最后加上版权声明 新建 passage-end-tag.swig 文件 在路径 \themes\next\layout\_macro中添加passage-end-tag.swig文件，其内容可以自定义： 12345678910111213141516171819&#123;% if theme.passage_end_tag.enabled %&#125;&lt;div&gt;&lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;------ 本文结束 ------&lt;/div&gt;&lt;br/&gt;&lt;ul class="post-copyright" style="margin: 2em 0 0; padding: 0.5em 1em;border-left: 3px solid #ff1700;background-color: #f9f9f9;list-style: none; "&gt; &lt;li class="post-copyright-author"&gt; &lt;strong&gt;本文作者：&lt;/strong&gt; Alex &lt;/li&gt; &lt;li class="post-copyright-license"&gt; &lt;strong&gt;版权声明： &lt;/strong&gt; 本博客所有文章除特别声明外，转载请注明出处！ &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&#123;% endif %&#125; 修改 post.swig 文件在\themes\next\layout\_macro\post.swig中，post-body之后，post-footer之前添: 1234&#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125;&#123;% endif %&#125; 在next主题配置yml中添加字段 1234# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 结束语跟着我的步骤可以很快的搭建一个属于自己的博客站点，当然hexo.next远远不知这些配置项，有兴趣的同学可以自己看看里面的配置。这篇文章为什么叫一行代码搭建hexo博客呢，啊哈哈哈，不这样也不会有人看哇，懂hexo的人就不用看了，高手勿喷~另外可以使用翻墙软件在下方评论，写下你想说的话，没有翻墙的，可以直接在站点概述中qq我或者e-mail我都可以。祝，早新手早日玩转hexo博客，这是 博主 的博客，文章不定期更新 NexT官网地址]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
