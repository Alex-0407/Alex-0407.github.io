<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alex的博客</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://github.com/alex-0407/"/>
  <updated>2018-06-21T08:09:10.020Z</updated>
  <id>https://github.com/alex-0407/</id>
  
  <author>
    <name>扫码关注</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mobile-assistant 效果图标注0615</title>
    <link href="https://github.com/alex-0407/2018/06/21/mobile-assistant/"/>
    <id>https://github.com/alex-0407/2018/06/21/mobile-assistant/</id>
    <published>2018-06-21T08:30:11.000Z</published>
    <updated>2018-06-21T08:09:10.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><p>mobile-assistant 效果图标注</p><hr> <a id="more"></a><h2 id="效果图标注0615"><a href="#效果图标注0615" class="headerlink" title="效果图标注0615"></a>效果图标注0615</h2><ol><li><p>001登录<em>标注.png<br>![001登录</em>标注.png](../img/mobile-assistant/001登录_标注.png)</p></li><li><p>002工作台V2_标注.png<br><img src="../img/mobile-assistant/002工作台V2_标注.png" alt="002工作台V2_标注.png"></p></li><li><p>003消息<em>标注.png<br>![003消息</em>标注.png](../img/mobile-assistant/003消息_标注.png)</p></li><li><p>003消息<em>空白数据</em>标注.png<br><img src="../img/mobile-assistant/003消息_空白数据_标注.png" alt="003消息_空白数据_标注.png"></p></li><li><p>004消息详情<em>标注.png<br>![004消息详情</em>标注.png](../img/mobile-assistant/004消息详情_标注.png)</p></li><li><p>005我的<em>标注.png<br>![005我的</em>标注.png](../img/mobile-assistant/005我的_标注.png)</p></li><li><p>006交接班.png<br><img src="../img/mobile-assistant/006交接班.png" alt="006交接班.png"></p></li><li><p>007我的排班.png<br><img src="../img/mobile-assistant/007我的排班.png" alt="007我的排班.png"></p></li><li><p>008例行检查.png<br><img src="../img/mobile-assistant/008例行检查.png" alt="008例行检查.png"></p></li><li><p>009例行检查<em>任务列表</em>标注.png<br><img src="../img/mobile-assistant/009例行检查_任务列表_标注.png" alt="009例行检查_任务列表_标注.png"></p></li><li><p>010设备查找<em>标注.png<br>![010设备查找</em>标注.png](../img/mobile-assistant/010设备查找_标注.png)</p></li><li><p>011设备高级检索<em>标注.png<br>![011设备高级检索</em>标注.png](../img/mobile-assistant/011设备高级检索_标注.png)</p></li><li><p>013设备维护<em>标注.png<br>![013设备维护</em>标注.png](../img/mobile-assistant/013设备维护_标注.png)</p></li><li><p>014通讯录<em>标注.png<br>![014通讯录</em>标注.png](../img/mobile-assistant/014通讯录_标注.png)</p></li><li><p>015通讯录_详情<em>标注.png<br>![015通讯录</em>详情<em>标注.png](../img/mobile-assistant/015通讯录</em>详情_标注.png)</p></li><li><p>016群组列表<em>标注.png<br>![016群组列表</em>标注.png](../img/mobile-assistant/016群组列表_标注.png)</p></li><li><p>017对话<em>标注.png<br>![017对话</em>标注.png](../img/mobile-assistant/017对话_标注.png)</p></li><li><p>018群组信息<em>标注.png<br>![018群组信息</em>标注.png](../img/mobile-assistant/018群组信息_标注.png)</p></li><li><p>019例行检查<em>任务核查</em>标注.png<br><img src="../img/mobile-assistant/019例行检查_任务核查_标注.png" alt="019例行检查_任务核查_标注.png"></p></li><li><p>020我的机架<em>标注.png<br>![020我的机架</em>标注.png](../img/mobile-assistant/020我的机架_标注.png)</p></li><li><p>021机架列表<em>标注.png<br>![021机架列表</em>标注.png](../img/mobile-assistant/021机架列表_标注.png)</p></li><li><p>023机架管理<em>标注.png<br>![023机架管理</em>标注.png](../img/mobile-assistant/023机架管理_标注.png)</p></li><li><p>l001任务列表<em>标注.png<br>![l001任务列表</em>标注.png](../img/mobile-assistant/l001任务列表_标注.png)</p></li><li><p>l002新建任务<em>标注.png<br>![l002新建任务</em>标注.png](../img/mobile-assistant/l002新建任务_标注.png)</p></li><li><p>l003任务详情<em>标注.png<br>![l003任务详情</em>标注.png](../img/mobile-assistant/l003任务详情_标注.png)</p></li><li><p>l005新建标签<em>标注.png<br>![l005新建标签</em>标注.png](../img/mobile-assistant/l005新建标签_标注.png)</p></li><li><p>l006搜索<em>标注.png<br>![l006搜索</em>标注.png](../img/mobile-assistant/l006搜索_标注.png)</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;p&gt;mobile-assistant 效果图标注&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/categories/ionic3/"/>
    
    
      <category term="ionic" scheme="https://github.com/alex-0407/tags/ionic/"/>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/tags/ionic3/"/>
    
  </entry>
  
  <entry>
    <title>angular2组件之间的交互</title>
    <link href="https://github.com/alex-0407/2018/06/08/angular2%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>https://github.com/alex-0407/2018/06/08/angular2组件之间的交互/</id>
    <published>2018-06-08T08:30:11.000Z</published>
    <updated>2018-06-10T06:40:14.980Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><h2 id="通过输入型绑定把数据从父组件传到子组件。"><a href="#通过输入型绑定把数据从父组件传到子组件。" class="headerlink" title="通过输入型绑定把数据从父组件传到子组件。"></a>通过输入型绑定把数据从父组件传到子组件。</h2><p>HeroChildComponent 有两个输入型属性，它们通常带@Input 装饰器。<br>component-interaction/src/app/hero-child.component.ts</p><pre><code>import { Component, Input } from &apos;@angular/core&apos;;import { Hero } from &apos;./hero&apos;;@Component({  selector: &apos;app-hero-child&apos;,  template: `    &lt;h3&gt;{{hero.name}} says:&lt;/h3&gt;    &lt;p&gt;I, {{hero.name}}, am at your service, {{masterName}}.&lt;/p&gt;  `})export class HeroChildComponent {  @Input() hero: Hero;  @Input(&apos;master&apos;) masterName: string;}</code></pre><p>第二个 @Input 为子组件的属性名 masterName 指定一个别名 master(译者注：不推荐为起别名，请参见风格指南).</p><p>父组件 HeroParentComponent 把子组件的 HeroChildComponent 放到 *ngFor 循环器中，把自己的 master 字符串属性绑定到子组件的 master 别名上，并把每个循环的 hero 实例绑定到子组件的 hero 属性。<br>component-interaction/src/app/hero-parent.component.ts</p><pre><code>import { Component } from &apos;@angular/core&apos;;import { HEROES } from &apos;./hero&apos;;@Component({  selector: &apos;app-hero-parent&apos;,  template: `    &lt;h2&gt;{{master}} controls {{heroes.length}} heroes&lt;/h2&gt;    &lt;app-hero-child *ngFor=&quot;let hero of heroes&quot;      [hero]=&quot;hero&quot;      [master]=&quot;master&quot;&gt;    &lt;/app-hero-child&gt;  `})export class HeroParentComponent {  heroes = HEROES;  master = &apos;Master&apos;;}</code></pre><hr> <a id="more"></a><h2 id="Angular-2-架构"><a href="#Angular-2-架构" class="headerlink" title="Angular 2 架构"></a>Angular 2 架构</h2><p>Angular 2 应用程序应用主要由以下 8 个部分组成：</p><p>1、模块 (Modules)</p><p>2、组件 (Components)</p><p>3、模板 (Templates)</p><p>4、元数据 (Metadata)</p><p>5、数据绑定 (Data Binding)</p><p>6、指令 (Directives)</p><p>7、服务 (Services)</p><p>8、依赖注入 (Dependency Injection)</p><p>下面看每个部分是如何相互工作的：</p><p>模板 (Templates)是由 Angular 扩展的 HTML 语法组成，组件 (Components)类用来管理这些模板，应用逻辑部分通过服务 (Services)来完成，然后在模块中打包服务与组件，最后通过引导根模块来启动应用。</p><p>接下来对以上 8 个部分分开解析：</p><h3 id="1-模块"><a href="#1-模块" class="headerlink" title="1.模块"></a>1.模块</h3><p>模块又一块代码组成，可用于执行一个简单的任务。</p><p>Angular 应用是由模块化的，它有自己的模块系统：NgModules。</p><p>每个 Angular 应该至少要有一个模块(根模块)，一般可以命名为：AppModule。</p><p>Angular 模块是一个带有 @NgModule 装饰器的类，它接收一个用来描述模块属性的元数据对象。</p><p>几个重要的属性如下：</p><p>declarations （声明）- 视图类属于这个模块。 Angular 有三种类型的视图类： 组件 、 指令 和 管道 。</p><p>exports- 声明（ declaration ）的子集，可用于其它模块中的组件模板 。</p><p>imports- 本模块组件模板中需要由其它导出类的模块。</p><p>providers- 服务的创建者。本模块把它们加入全局的服务表中，让它们在应用中的任何部分都可被访问到。</p><p>bootstrap- 应用的主视图，称为根组件，它是所有其它应用视图的宿主。只有根模块需要设置 bootstrap 属性中。</p><p>一个最简单的根模块，eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;NgModule&#125;<span class="keyword">from</span><span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;BrowserModule&#125;<span class="keyword">from</span><span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;<span class="attr">imports</span>: [BrowserModule],</span><br><span class="line"></span><br><span class="line">providers: [Logger],</span><br><span class="line"></span><br><span class="line">declarations: [AppComponent],</span><br><span class="line"></span><br><span class="line">exports: [AppComponent],</span><br><span class="line"></span><br><span class="line">bootstrap: [AppComponent]&#125;)exportclassAppModule&#123;&#125;</span><br></pre></td></tr></table></figure><p>接下来通过引导根模块来启动应用，开发过程通常在 main.ts 文件中来引导 AppModule ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;platformBrowserDynamic&#125;<span class="keyword">from</span><span class="string">'@angular/platform-browser-dynamic'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;AppModule&#125;<span class="keyword">from</span><span class="string">'./app.module'</span>;</span><br><span class="line"></span><br><span class="line">platformBrowserDynamic().bootstrapModule(AppModule);</span><br></pre></td></tr></table></figure><h3 id="2-组件-Components"><a href="#2-组件-Components" class="headerlink" title="2.组件(Components)"></a>2.组件(Components)</h3><p>组件是一个模板的控制类用于处理应用和逻辑页面的视图部分。</p><p>组件是构成 Angular 应用的基础和核心，可用于整个应用程序中。</p><p>组件知道如何渲染自己及配置依赖注入。</p><p>组件通过一些由属性和方法组成的 API 与视图交互。</p><p>创建 Angular 组件的方法有三步：</p><p>从 @angular/core 中引入 Component 修饰器</p><p>建立一个普通的类，并用 @Component 修饰它</p><p>在 @Component 中，设置 selector自定义标签，以及 template模板</p><h3 id="3-模板-Templates"><a href="#3-模板-Templates" class="headerlink" title="3.模板(Templates)"></a>3.模板(Templates)</h3><p>Angular模板的默认语言就是HTML。</p><p>我们可以通过使用模板来定义组件的视图来告诉 Angular 如何显示组件。以下是一个简单是实例：</p><p>网站地址 : [object Object]</p><h3 id="4-元数据-Metadata"><a href="#4-元数据-Metadata" class="headerlink" title="4.元数据(Metadata)"></a>4.元数据(Metadata)</h3><p>元数据告诉 Angular 如何处理一个类。</p><p>考虑以下情况我们有一个组件叫作 Component ，它是一个类，直到我们告诉 Angular 这是一个组件为止。</p><p>你可以把元数据附加到这个类上来告诉 Angular Component 是一个组件。</p><p>在 TypeScript 中，我们用 装饰器 (decorator) 来附加元数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">eg：</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line"></span><br><span class="line">selector : <span class="string">'mylist'</span>,</span><br><span class="line"></span><br><span class="line">template : <span class="string">'菜鸟教程'</span></span><br><span class="line"></span><br><span class="line">directives : [ComponentDetails]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ListComponent</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>@Component 装饰器能接受一个配置对象，并把紧随其后的类标记成了组件类。</p><p>Angular 会基于这些信息创建和展示组件及其视图。</p><p>@Component 中的配置项说明：</p><p>selector- 一个 css 选择器，它告诉 Angular 在 父级 HTML 中寻找一个  标签，然后创建该组件，并插入此标签中。</p><p>templateUrl- 组件 HTML 模板的地址。</p><p>directives- 一个数组，包含 此 模板需要依赖的组件或指令。</p><p>providers- 一个数组，包含组件所依赖的服务所需要的依赖注入提供者。</p><h3 id="5-数据绑定-Data-binding"><a href="#5-数据绑定-Data-binding" class="headerlink" title="5.数据绑定(Data binding)"></a>5.数据绑定(Data binding)</h3><p>数据绑定为应用程序提供了一种简单而一致的方法来显示数据以及数据交互，它是管理应用程序里面数值的一种机制。</p><p>通过这种机制，可以从HTML里面取值和赋值，使得数据的读写，数据的持久化操作变得更加简单快捷。</p><p>插值: 在 HTML 标签中显示组件值。</p>angular2组件之间的交互<p>属性绑定: 把元素的属性设置为组件中属性的值。</p><p>事件绑定: 在组件方法名被点击时触发。</p><p>双向绑: 使用Angular里的NgModel指令可以更便捷的进行双向绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(input)=<span class="string">"currentUser.firstName=$event.target.value"</span> &gt;</span><br></pre></td></tr></table></figure><h3 id="6-指令（Directives）"><a href="#6-指令（Directives）" class="headerlink" title="6.指令（Directives）"></a>6.指令（Directives）</h3><p>Angular模板是动态的 。当 Angular 渲染它们时，它会根据指令对 DOM 进行修改。</p><p>指令是一个带有”指令元数据”的类。在 TypeScript 中，要通过 @Directive 装饰器把元数据附加到类上。</p><p>在Angular中包含以下三种类型的指令：</p><p>属性指令：以元素的属性形式来使用的指令。</p><p>结构指令：用来改变DOM树的结构</p><p>组件：作为指令的一个重要子类，组件本质上可以看作是一个带有模板的指令。</p><p>*ngFor 告诉 Angular 为 sites 列表中的每个项生成一个</p><p>标签。</p><p>*ngIf 表示只有在选择的项存在时，才会包含 SiteDetail 组件。</p><h3 id="7-服务-Services"><a href="#7-服务-Services" class="headerlink" title="7.服务(Services)"></a>7.服务(Services)</h3><p>Angular2中的服务是封装了某一特定功能，并且可以通过注入的方式供他人使用的独立模块。</p><p>服务分为很多种，包括：值、函数，以及应用所需的特性。</p><p>例如，多个组件中出现了重复代码时，把重复代码提取到服务中实现代码复用。</p><p>以下是几种常见的服务：</p><p>日志服务</p><p>数据服务</p><p>消息总线</p><p>税款计算器</p><p>应用程序配置</p><p>以下实例是一个日志服务，用于把日志记录到浏览器的控制台：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">log(msg: any) &#123; <span class="built_in">console</span>.log(msg); &#125;</span><br><span class="line"></span><br><span class="line">error(msg: any) &#123; <span class="built_in">console</span>.error(msg); &#125;</span><br><span class="line"></span><br><span class="line">warn(msg: any) &#123; <span class="built_in">console</span>.warn(msg); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-依赖注入"><a href="#8-依赖注入" class="headerlink" title="8.依赖注入"></a>8.依赖注入</h3><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫”依赖查找”（Dependency Lookup）。</p><p>通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><p>在传统的开发模式中，调用者负责管理所有对象的依赖，循环依赖一直是梦魇，而在依赖注入模式中，这个管理权交给了注入器(Injector)，它在软件运行时负责依赖对象的替换，而不是在编译时。这种控制反转，运行注入的特点即是依赖注入的精华所在。</p><p>Angular 能通过查看构造函数的参数类型，来得知组件需要哪些服务。 例如， SiteListComponent 组件的构造函数需要一个 SiteService:</p><p>constructor(private service: HeroService) { }</p><p>当 Angular 创建组件时，会首先为组件所需的服务找一个注入器（ Injector ） 。</p><p>注入器是一个维护服务实例的容器，存放着以前创建的实例。</p><p>如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给 Angular 。</p><p>当所有的服务都被解析完并返回时， Angular 会以这些服务为参数去调用组件的构造函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;通过输入型绑定把数据从父组件传到子组件。&quot;&gt;&lt;a href=&quot;#通过输入型绑定把数据从父组件传到子组件。&quot; class=&quot;headerlink&quot; title=&quot;通过输入型绑定把数据从父组件传到子组件。&quot;&gt;&lt;/a&gt;通过输入型绑定把数据从父组件传到子组件。&lt;/h2&gt;&lt;p&gt;HeroChildComponent 有两个输入型属性，它们通常带@Input 装饰器。&lt;br&gt;component-interaction/src/app/hero-child.component.ts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { Component, Input } from &amp;apos;@angular/core&amp;apos;;

import { Hero } from &amp;apos;./hero&amp;apos;;

@Component({
  selector: &amp;apos;app-hero-child&amp;apos;,
  template: `
    &amp;lt;h3&amp;gt;{{hero.name}} says:&amp;lt;/h3&amp;gt;
    &amp;lt;p&amp;gt;I, {{hero.name}}, am at your service, {{masterName}}.&amp;lt;/p&amp;gt;
  `
})
export class HeroChildComponent {
  @Input() hero: Hero;
  @Input(&amp;apos;master&amp;apos;) masterName: string;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二个 @Input 为子组件的属性名 masterName 指定一个别名 master(译者注：不推荐为起别名，请参见风格指南).&lt;/p&gt;
&lt;p&gt;父组件 HeroParentComponent 把子组件的 HeroChildComponent 放到 *ngFor 循环器中，把自己的 master 字符串属性绑定到子组件的 master 别名上，并把每个循环的 hero 实例绑定到子组件的 hero 属性。&lt;br&gt;component-interaction/src/app/hero-parent.component.ts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { Component } from &amp;apos;@angular/core&amp;apos;;

import { HEROES } from &amp;apos;./hero&amp;apos;;

@Component({
  selector: &amp;apos;app-hero-parent&amp;apos;,
  template: `
    &amp;lt;h2&amp;gt;{{master}} controls {{heroes.length}} heroes&amp;lt;/h2&amp;gt;
    &amp;lt;app-hero-child *ngFor=&amp;quot;let hero of heroes&amp;quot;
      [hero]=&amp;quot;hero&amp;quot;
      [master]=&amp;quot;master&amp;quot;&amp;gt;
    &amp;lt;/app-hero-child&amp;gt;
  `
})
export class HeroParentComponent {
  heroes = HEROES;
  master = &amp;apos;Master&amp;apos;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="angular2" scheme="https://github.com/alex-0407/categories/angular2/"/>
    
    
      <category term="angular" scheme="https://github.com/alex-0407/tags/angular/"/>
    
      <category term="angular2" scheme="https://github.com/alex-0407/tags/angular2/"/>
    
  </entry>
  
  <entry>
    <title>tslint 与 git pre-commit 配置教程</title>
    <link href="https://github.com/alex-0407/2018/06/07/tslint%20git%20pre-commit%20%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <id>https://github.com/alex-0407/2018/06/07/tslint git pre-commit 配置教程/</id>
    <published>2018-06-07T08:30:11.000Z</published>
    <updated>2018-06-07T01:55:07.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><h2 id="tslint-配合pre-commit的意义"><a href="#tslint-配合pre-commit的意义" class="headerlink" title="tslint 配合pre-commit的意义"></a>tslint 配合pre-commit的意义</h2><p>为什么用pre-commit 加 tslint（jshint，eslint原理都类似），因为在项目中我们会经常忘记主动的去做代码检查，虽然结合webpack各种构建工具下，存在*slint报错，项目会跑不起来。但在某些情况下，可能会因为着急，或者其他原因，没有去观察项目运行的情况就仓促提交。团队开发的情景下，可能会成为别人的麻烦。而pre-commit tslint解决的需求既是：拒绝向仓库提交错误代码。</p><h2 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h2><p>在配置tslint pre commit之前，首先需要了解git hooks，正如它的名字所示，这是一个关于git 操作的钩子，比如我们想要在做远程仓库推送时，那就会触发pre-push这个钩子，然后在这个钩子中写下自己想做的事。git hooks的配置就在项目.git文件夹下面的hooks文件夹中。</p><p>在写相关的钩子函数时，需要注意的是，将钩子后面的sample后缀去掉，代码才会生效。</p><p>比如，本文中用到的pre-commit这个钩子。 </p><p>更多关于git hooks的介绍，请参考：<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank" rel="noopener">https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks</a></p><p>下面介绍如何配置：</p><hr> <a id="more"></a><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><ol><li>打开项目中的.git/hooks文件夹，找到pre-commit.sample文件，将以下代码替换到文件中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">TSLINT=&quot;$(git rev-parse --show-toplevel)/node_modules/.bin/tslint&quot;</span><br><span class="line">for file in $(git diff --cached --name-only | grep -E &apos;\.ts$&apos;)</span><br><span class="line">do</span><br><span class="line">        git show &quot;:$file&quot; | &quot;$TSLINT&quot; &quot;$file&quot;</span><br><span class="line">        if [ $? -ne 0 ]; then</span><br><span class="line">                exit 1</span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ol start="2"><li>将pre-commit.sample文件名修改为pre-commit。</li></ol><p>此时再打开项目运行git commit -m”xxx”命令时，tslint会做自动的检查，如果没有错误的话，才会提交成功。而存在tslint报错的话，会终止提交。<br><img src="https://upload-images.jianshu.io/upload_images/3100736-33f7c7ab5dc22071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tslint-error.png"></p><ul><li>注意： 日常开发中，有时为了方便会直接使用git commit -am”xxx”（即add+commit）的指令。而pre-commit 只是单独commit 钩子，因此还需要在pre-applypatch这个钩子下去做相同的配置。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;tslint-配合pre-commit的意义&quot;&gt;&lt;a href=&quot;#tslint-配合pre-commit的意义&quot; class=&quot;headerlink&quot; title=&quot;tslint 配合pre-commit的意义&quot;&gt;&lt;/a&gt;tslint 配合pre-commit的意义&lt;/h2&gt;&lt;p&gt;为什么用pre-commit 加 tslint（jshint，eslint原理都类似），因为在项目中我们会经常忘记主动的去做代码检查，虽然结合webpack各种构建工具下，存在*slint报错，项目会跑不起来。但在某些情况下，可能会因为着急，或者其他原因，没有去观察项目运行的情况就仓促提交。团队开发的情景下，可能会成为别人的麻烦。而pre-commit tslint解决的需求既是：拒绝向仓库提交错误代码。&lt;/p&gt;
&lt;h2 id=&quot;git-hooks&quot;&gt;&lt;a href=&quot;#git-hooks&quot; class=&quot;headerlink&quot; title=&quot;git hooks&quot;&gt;&lt;/a&gt;git hooks&lt;/h2&gt;&lt;p&gt;在配置tslint pre commit之前，首先需要了解git hooks，正如它的名字所示，这是一个关于git 操作的钩子，比如我们想要在做远程仓库推送时，那就会触发pre-push这个钩子，然后在这个钩子中写下自己想做的事。git hooks的配置就在项目.git文件夹下面的hooks文件夹中。&lt;/p&gt;
&lt;p&gt;在写相关的钩子函数时，需要注意的是，将钩子后面的sample后缀去掉，代码才会生效。&lt;/p&gt;
&lt;p&gt;比如，本文中用到的pre-commit这个钩子。 &lt;/p&gt;
&lt;p&gt;更多关于git hooks的介绍，请参考：&lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面介绍如何配置：&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="tslint" scheme="https://github.com/alex-0407/categories/tslint/"/>
    
    
      <category term="tslint" scheme="https://github.com/alex-0407/tags/tslint/"/>
    
      <category term="git" scheme="https://github.com/alex-0407/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>TSLint常用配置及使用方法</title>
    <link href="https://github.com/alex-0407/2018/06/06/TSLint/"/>
    <id>https://github.com/alex-0407/2018/06/06/TSLint/</id>
    <published>2018-06-06T05:55:55.000Z</published>
    <updated>2018-06-07T01:55:07.017Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><h2 id="TSLint核心规则及相关库"><a href="#TSLint核心规则及相关库" class="headerlink" title="TSLint核心规则及相关库"></a>TSLint核心规则及相关库</h2><p>TSLint已经提供了一些核心规则，但是还不够，于是有人用TSLint提供的自定义接口又自定义了许多规则。如：</p><ul><li>tslint-eslint-rules——ionic项目默认使用这个</li><li>codelyzer——angular项目默认使用这个</li><li><p>还有很多</p><hr></li></ul>  <a id="more"></a><h2 id="腾讯团队开源项目tslint-config-alloy"><a href="#腾讯团队开源项目tslint-config-alloy" class="headerlink" title="腾讯团队开源项目tslint-config-alloy"></a>腾讯团队开源项目tslint-config-alloy</h2><p>现在有了大量校验规则，如何使用如何配置呢。我们使用了腾讯团队的开源项目tslint-config-alloy，它的配置原则：</p><ul><li>能够帮助发现代码错误的规则，全部开启</li><li>配置不应该依赖于某个具体项目，而应尽可能的合理</li><li>帮助保持团队的代码风格统一，而不是限制开发体验</li></ul><p>如果觉得tslint-config-alloy提供的配置不合理，我们就可以在本文最开始提到的tslint.json文件(ionic项目根目录下)中覆盖它的配置</p><h2 id="如何使用tslint-config-alloy"><a href="#如何使用tslint-config-alloy" class="headerlink" title="如何使用tslint-config-alloy"></a>如何使用tslint-config-alloy</h2><ul><li><p>项目安装依赖：npm install –save-dev tslint-eslint-rules tslint-config-alloy</p><p> 其中tslint-eslint-rules是规则的实现，它的规则已经继承了tslint，其中tslint-config-alloy是规则的配置，我们的配置继承这里的配置。</p></li><li><p>配置tslint.json内容如下</p><p>其中rulesDirectory指定规则的实现目录，可以配置多个，如你自定义的规则的目录；其中extends指定我们继承的配置，这里继承tslint-config-alloy，我们可以在rules中添加配置和覆盖tslint-config-alloy提供的配置。</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"tslint-config-alloy"</span>,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    "no-parameter-properties":false, // 禁止给类的构造函数的参数添加修饰符</span><br><span class="line">    "triple-equals":false,</span><br><span class="line">    "no-debugger": false,</span><br><span class="line">    // 禁止行尾有空格</span><br><span class="line">    "no-trailing-whitespace": false,</span><br><span class="line">    "member-ordering":false,</span><br><span class="line">    "no-this-assignment": [true, &#123;"allowed-names": ["^self$","^that$"], "allow-destructuring": true&#125;],</span><br><span class="line">    // 必须使用箭头函数，除非是单独的函数声明或是命名函数</span><br><span class="line">    "only-arrow-functions": [</span><br><span class="line">      false,</span><br><span class="line">      "allow-declarations",</span><br><span class="line">      <span class="string">"allow-named-functions"</span></span><br><span class="line">    ],</span><br><span class="line">    // 禁止出现空代码块，允许 catch 是空代码块</span><br><span class="line">    "no-empty": [</span><br><span class="line">      false,</span><br><span class="line">      <span class="string">"allow-empty-catch"</span></span><br><span class="line">    ],</span><br><span class="line">    // 禁止无用的类型断言</span><br><span class="line">    "no-unnecessary-type-assertion": false,</span><br><span class="line">    // 使用 return; 而不是 return undefined;</span><br><span class="line">    "return-undefined": false,</span><br><span class="line">    // 禁止对 array 使用 for in 循环</span><br><span class="line">    "no-for-in-array": false,</span><br><span class="line">    "comment-format": [true, "check-space"], // 单行注释格式化规则</span><br><span class="line">  &#125;,</span><br><span class="line">  "rulesDirectory": [</span><br><span class="line">    <span class="string">"node_modules/tslint-eslint-rules/dist/rules"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tslint代码风格规则和ide默认的格式化代码风格存在冲突如何解决"><a href="#tslint代码风格规则和ide默认的格式化代码风格存在冲突如何解决" class="headerlink" title="tslint代码风格规则和ide默认的格式化代码风格存在冲突如何解决"></a>tslint代码风格规则和ide默认的格式化代码风格存在冲突如何解决</h2><p>   这时候要么在tslint.json重新定义规则，要么修改ide配置，如：</p><ol><li><p>webstorm设置import自动导入的内容为单引号<br><img src="https://upload-images.jianshu.io/upload_images/3100736-ae0ab7129b2d7469.gif?imageMogr2/auto-orient/strip" alt="webstorm-punctation.gif"></p></li><li><p>webstorm设置import自动导入大括号两边添加空格<br><img src="https://upload-images.jianshu.io/upload_images/3100736-aad1e6a8a61076d7.gif?imageMogr2/auto-orient/strip" alt="webstorm-spaces.gif"></p><p>默认自动生成格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;AbstractControl&#125; from &apos;@angular/forms&apos;;</span><br></pre></td></tr></table></figure><p>想要格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AbstractControl &#125; from &apos;@angular/forms&apos;;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>其他配置自行百度</li><li>实际开发过程中可以先不启用TSLint，每次提交代码前或测试开发的代码时在启用并修复问题</li></ol><h2 id="TSLint注释标记"><a href="#TSLint注释标记" class="headerlink" title="TSLint注释标记"></a>TSLint注释标记</h2><ul><li><p>ts文件中使用以下注释来临时忽略规则出现的错误，参考这里</p><p>  /<em> tslint:disable </em>/——忽略该行以下所有代码出现的错误提示</p><p>  /<em> tslint:enable </em>/——当前ts文件重新启用tslint</p><p>  // tslint:disable-line——忽略当前行代码出现的错误提示</p><p>  // tslint:disable-next-line——忽略下一行代码出现的错误提示</p></li></ul><h2 id="常用的tslint配置项"><a href="#常用的tslint配置项" class="headerlink" title="常用的tslint配置项"></a>常用的tslint配置项</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 禁止给类的构造函数的参数添加修饰符</span><br><span class="line">  "no-parameter-properties": false,</span><br><span class="line">  // 禁止使用 debugger</span><br><span class="line">  "no-debugger": false,</span><br><span class="line">  // 禁止行尾有空格</span><br><span class="line">  "no-trailing-whitespace": false,</span><br><span class="line">  // 禁止无用的表达式</span><br><span class="line">  "no-unused-expression": true,</span><br><span class="line">  // 定义过的变量必须使用</span><br><span class="line">  "no-unused-variable": true,</span><br><span class="line">  // 变量必须先定义后使用</span><br><span class="line">  "no-use-before-declare": true,</span><br><span class="line">  // 禁止使用 var</span><br><span class="line">  "no-var-keyword": true,</span><br><span class="line">  // 必须使用 === 或 !==，禁止使用 == 或 !=，与 null 比较时除外</span><br><span class="line">  "triple-equals": true,</span><br><span class="line">  // 指定类成员的排序规则</span><br><span class="line">  "member-ordering": false,</span><br><span class="line">  // 禁止将 this 赋值给其他变量，除非是解构赋值</span><br><span class="line">  "no-this-assignment": [</span><br><span class="line">    false,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"allowed-names"</span>: [</span><br><span class="line">        <span class="string">"^self$"</span>,</span><br><span class="line">        <span class="string">"^that$"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"allow-destructuring"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  // 必须使用箭头函数，除非是单独的函数声明或是命名函数</span><br><span class="line">  "only-arrow-functions": [</span><br><span class="line">    true,</span><br><span class="line">    "allow-declarations",</span><br><span class="line">    <span class="string">"allow-named-functions"</span></span><br><span class="line">  ],</span><br><span class="line">  // 禁止出现空代码块，允许 catch 是空代码块</span><br><span class="line">  "no-empty": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="string">"allow-empty-catch"</span></span><br><span class="line">  ],</span><br><span class="line">  // 禁止无用的类型断言</span><br><span class="line">  "no-unnecessary-type-assertion": true,</span><br><span class="line">  // 使用 return; 而不是 return undefined;</span><br><span class="line">  "return-undefined": true,</span><br><span class="line">  // 禁止对 array 使用 for in 循环</span><br><span class="line">  "no-for-in-array": true,</span><br><span class="line">  "comment-format": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="string">"check-space"</span></span><br><span class="line">  ],</span><br><span class="line">  // 单行注释格式化规则</span><br><span class="line">  // 定义函数时如果用到了覆写，则必须将覆写的函数写到一起</span><br><span class="line">  "adjacent-overload-signatures": true,</span><br><span class="line">  // 禁止对函数的参数重新赋值</span><br><span class="line">  "no-parameter-reassignment": true,</span><br><span class="line">  // if 后面必须有 &#123;，除非是单行 if</span><br><span class="line">  "curly": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="string">"ignore-same-line"</span></span><br><span class="line">  ],</span><br><span class="line">  // for in 内部必须有 hasOwnProperty</span><br><span class="line">  "forin": true,</span><br><span class="line">  // 禁止在分支条件判断中有赋值操作</span><br><span class="line">  "no-conditional-assignment": true,</span><br><span class="line">  // 禁止使用 new 来生成 String, Number 或 Boolean</span><br><span class="line">  "no-construct": true,</span><br><span class="line">  // 禁止 super 在一个构造函数中出现两次</span><br><span class="line">  "no-duplicate-super": true,</span><br><span class="line">  // 禁止在 switch 语句中出现重复测试表达式的 case</span><br><span class="line">  "no-duplicate-switch-case": true,</span><br><span class="line">  // 禁止出现重复的变量定义或函数参数名</span><br><span class="line">  "no-duplicate-variable": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="string">"check-parameters"</span></span><br><span class="line">  ],</span><br><span class="line">  // 禁止使用 eval</span><br><span class="line">  "no-eval": true,</span><br><span class="line">  // 禁止对对象字面量进行类型断言（断言成 any 是允许的）</span><br><span class="line">  "no-object-literal-type-assertion": true,</span><br><span class="line">  // 禁止没必要的 return await</span><br><span class="line">  "no-return-await": true,</span><br><span class="line">  // 禁止在数组中出现连续的逗号，如 let foo = [,,]</span><br><span class="line">  "no-sparse-arrays": true,</span><br><span class="line">  // 禁止 throw 字符串，必须 throw 一个 Error 对象</span><br><span class="line">  "no-string-throw": true,</span><br><span class="line">  // switch 的 case 必须 return 或 break</span><br><span class="line">  "no-switch-case-fall-through": true,</span><br><span class="line">  // 使用实例的方法时，必须 bind 到实例上</span><br><span class="line">  "no-unbound-method": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="string">"ignore-static"</span></span><br><span class="line">  ],</span><br><span class="line">  // 使用 &#123; ...foo, bar: 1 &#125; 代替 Object.assign(&#123;&#125;, foo, &#123; bar: 1 &#125;)</span><br><span class="line">  // 前者的类型检查更完善</span><br><span class="line">  "prefer-object-spread": true,</span><br><span class="line">  // parseInt 必须传入第二个参数</span><br><span class="line">  "radix": true,</span><br><span class="line">  // 必须使用 isNaN(foo) 而不是 foo === NaN</span><br><span class="line">  "use-isnan": true,</span><br><span class="line">  //</span><br><span class="line">  //</span><br><span class="line">  // 可维护性</span><br><span class="line">  // 这些规则可以增加代码的可维护性</span><br><span class="line">  //</span><br><span class="line">  // 禁止函数的循环复杂度超过 20，https://en.wikipedia.org/wiki/Cyclomatic_complexity</span><br><span class="line">  "cyclomatic-complexity": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="number">20</span></span><br><span class="line">  ],</span><br><span class="line">  // 禁止使用废弃（被标识了 @deprecated）的 API</span><br><span class="line">  "deprecation": true,</span><br><span class="line">  // 一个缩进必须用四个空格替代</span><br><span class="line">  "indent": [</span><br><span class="line">    true,</span><br><span class="line">    "spaces",</span><br><span class="line">    <span class="number">4</span></span><br><span class="line">  ],</span><br><span class="line">  // 禁止出现重复的 import</span><br><span class="line">  "no-duplicate-imports": true,</span><br><span class="line">  // 禁止一个文件中出现多个相同的 namespace</span><br><span class="line">  "no-mergeable-namespace": true,</span><br><span class="line">  // 文件类型必须时 utf-8</span><br><span class="line">  "encoding": true,</span><br><span class="line">  // import 语句中，关键字之间的间距必须是一个空格</span><br><span class="line">  "import-spacing": true,</span><br><span class="line">  // 接口可以 implement extend 和 merge</span><br><span class="line">  "interface-over-type-literal": true,</span><br><span class="line">  // new 后面只必须有一个空格</span><br><span class="line">  "new-parens": true,</span><br><span class="line">  // 类型断言必须使用 as Type，禁止使用 &lt;Type&gt;</span><br><span class="line">  // &lt;Type&gt; 容易被理解为 jsx</span><br><span class="line">  "no-angle-bracket-type-assertion": true,</span><br><span class="line">  // 禁止连续超过三行空行</span><br><span class="line">  "no-consecutive-blank-lines": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">  ],</span><br><span class="line">  // 禁止使用特殊空白符（比如全角空格）</span><br><span class="line">  "no-irregular-whitespace": true,</span><br><span class="line">  // 禁止使用 JSDoc，因为 TypeScirpt 已经包含了大部分功能</span><br><span class="line">  "no-redundant-jsdoc": true,</span><br><span class="line">  // 禁止使用三斜杠引入类型定义文件</span><br><span class="line">  "no-reference-import": true,</span><br><span class="line">  // 禁止变量定义时赋值为 undefined</span><br><span class="line">  "no-unnecessary-initializer": true,</span><br><span class="line">  // 小数必须以 0. 开头，禁止以 . 开头，并且不能以 0 结尾</span><br><span class="line">  "number-literal-format": true,</span><br><span class="line">  // 必须使用 a = &#123;b&#125; 而不是 a = &#123;b: b&#125;</span><br><span class="line">  "object-literal-shorthand": true,</span><br><span class="line">  // 变量申明必须每行一个，for 循环的初始条件中除外</span><br><span class="line">  "one-variable-per-declaration": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="string">"ignore-for-loop"</span></span><br><span class="line">  ],</span><br><span class="line">  // if 后的 &#123; 禁止换行</span><br><span class="line">  "one-line": true,</span><br><span class="line">  // 必须使用单引号，jsx 中必须使用双引号</span><br><span class="line">  "quotemark": [</span><br><span class="line">    true,</span><br><span class="line">    "single",</span><br><span class="line">    "jsx-double",</span><br><span class="line">    "avoid-template",</span><br><span class="line">    <span class="string">"avoid-escape"</span></span><br><span class="line">  ],</span><br><span class="line">  // 行尾必须有分号</span><br><span class="line">  "semicolon": [</span><br><span class="line">    true,</span><br><span class="line">    "always",</span><br><span class="line">    <span class="string">"ignore-interfaces"</span></span><br><span class="line">  ],</span><br><span class="line">  // 函数名前必须有空格</span><br><span class="line">  "space-before-function-paren": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="string">"asyncArrow"</span></span><br><span class="line">  ],</span><br><span class="line">  // 括号内首尾禁止有空格</span><br><span class="line">  "space-within-parens": [</span><br><span class="line">    true,</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">  ],</span><br><span class="line">  // 禁止 finally 内出现 return, continue, break, throw 等</span><br><span class="line">  // finally 会比 catch 先执行</span><br><span class="line">  "no-unsafe-finally": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;TSLint核心规则及相关库&quot;&gt;&lt;a href=&quot;#TSLint核心规则及相关库&quot; class=&quot;headerlink&quot; title=&quot;TSLint核心规则及相关库&quot;&gt;&lt;/a&gt;TSLint核心规则及相关库&lt;/h2&gt;&lt;p&gt;TSLint已经提供了一些核心规则，但是还不够，于是有人用TSLint提供的自定义接口又自定义了许多规则。如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tslint-eslint-rules——ionic项目默认使用这个&lt;/li&gt;
&lt;li&gt;codelyzer——angular项目默认使用这个&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还有很多&lt;/p&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="tslint" scheme="https://github.com/alex-0407/categories/tslint/"/>
    
    
      <category term="tslint" scheme="https://github.com/alex-0407/tags/tslint/"/>
    
  </entry>
  
  <entry>
    <title>深入理解普通函数中的this及ES6箭头函数的this</title>
    <link href="https://github.com/alex-0407/2018/06/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3js%E4%B8%AD%E7%9A%84this/"/>
    <id>https://github.com/alex-0407/2018/06/06/深入理解js中的this/</id>
    <published>2018-06-06T03:11:11.000Z</published>
    <updated>2018-06-06T05:52:15.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><h2 id="普通函数中的this"><a href="#普通函数中的this" class="headerlink" title="普通函数中的this:"></a>普通函数中的this:</h2><ol><li><p>this总是代表它的直接调用者(js的this是执行上下文), 例如 obj.func ,那么func中的this就是obj</p></li><li><p>在默认情况(非严格模式下,未使用 ‘use strict’),没找到直接调用者,则this指的是 window (约定俗成)</p></li><li><p>在严格模式下,没有直接调用者的函数中的this是 undefined</p></li><li><p>使用call,apply,bind(ES5新增)绑定的,this指的是绑定的对象</p></li></ol><h2 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h2><p>箭头函数没有自己的this, 它的this是继承而来; 默认指向在定义它时所处的对象(宿主对象),而不是执行时的对象, 定义它的时候,可能环境是window; 箭头函数可以方便地让我们在 setTimeout ,setInterval中方便的使用this</p><p>下面通过一些例子来研究一下 this的一些使用场景</p><hr> <a id="more"></a><h2 id="首先了解一下作用域链"><a href="#首先了解一下作用域链" class="headerlink" title="首先了解一下作用域链:"></a>首先了解一下作用域链:</h2><p>当在函数中使用一个变量的时候,首先在本函数内部查找该变量,如果找不到则找其父级函数,</p><p>最后直到window,全局变量默认挂载在window对象下</p><ol><li><p>全局变量默认挂载在window对象下</p></li><li><p>在普通函数中,this指向它的直接调用者;如果找不到直接调用者,则是window</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  test();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果是: window </p><p>原因: test()是一个全局函数,也就是说是挂在window对象下的,所以test()等价于 window.test() ,所以此时的this是window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   obj.say();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果是: window</p><p>匿名函数,定时器中的函数,由于没有默认的宿主对象,所以默认this指向window</p><p>3.在严格模式下的this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">test();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果是: undefined</p><p>4.箭头函数中的 this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say(); <span class="comment">// obj</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>此时的 this继承自obj, 指的是定义它的对象obj, 而不是 window!</p><p>示例(多层嵌套的箭头函数):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// obj</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// obj</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    f1();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>因为f1定义时所处的函数 中的 this是指的 obj, setTimeout中的箭头函数this继承自f1, 所以不管有多层嵌套,都是 obj</p><p>示例(复杂情况: 普通函数和箭头函数混杂嵌套)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window, f1调用时,没有宿主对象,默认是window</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    f1();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果: 都是 window,因为 箭头函数在定义的时候它所处的环境相当于是window, 所以在箭头函数内部的this函数window</p><p>示例(严格模式下的混杂嵌套)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// undefined</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// undefined</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    f1();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果都是undefined</p><p>说明: 严格模式下,没有宿主调用的函数中的this是undefined!!!所以箭头函数中的也是undefined!</p><ul><li>总结:</li></ul><p>使用箭头函数,可以让我们解决一些在匿名函数中this指向不正确的问题; 但是要注意在和普通函数混合的时候,this的指向可能是window !</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;普通函数中的this&quot;&gt;&lt;a href=&quot;#普通函数中的this&quot; class=&quot;headerlink&quot; title=&quot;普通函数中的this:&quot;&gt;&lt;/a&gt;普通函数中的this:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;this总是代表它的直接调用者(js的this是执行上下文), 例如 obj.func ,那么func中的this就是obj&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在默认情况(非严格模式下,未使用 ‘use strict’),没找到直接调用者,则this指的是 window (约定俗成)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在严格模式下,没有直接调用者的函数中的this是 undefined&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用call,apply,bind(ES5新增)绑定的,this指的是绑定的对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;箭头函数中的this&quot;&gt;&lt;a href=&quot;#箭头函数中的this&quot; class=&quot;headerlink&quot; title=&quot;箭头函数中的this&quot;&gt;&lt;/a&gt;箭头函数中的this&lt;/h2&gt;&lt;p&gt;箭头函数没有自己的this, 它的this是继承而来; 默认指向在定义它时所处的对象(宿主对象),而不是执行时的对象, 定义它的时候,可能环境是window; 箭头函数可以方便地让我们在 setTimeout ,setInterval中方便的使用this&lt;/p&gt;
&lt;p&gt;下面通过一些例子来研究一下 this的一些使用场景&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="js" scheme="https://github.com/alex-0407/categories/js/"/>
    
    
      <category term="js" scheme="https://github.com/alex-0407/tags/js/"/>
    
      <category term="this" scheme="https://github.com/alex-0407/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>ionic3之tabs用法详解,你知道的和不知道的都在这儿</title>
    <link href="https://github.com/alex-0407/2018/06/06/ionic3%E4%B9%8Btabs%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://github.com/alex-0407/2018/06/06/ionic3之tabs用法详解/</id>
    <published>2018-06-06T02:30:00.000Z</published>
    <updated>2018-06-07T02:18:09.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><p>Tabs（选项卡）<br>ion-tabs</p><p>在一个 app 中，Tabs 使得在不同页面和功能之间导航更加容易。Tabs 组件，以 <ion-tabs> 的方式写，是单个 Tab 组件的容器。每个 <ion-tab> 对于 NavControll 来说是公开的组件。</ion-tab></ion-tabs></p><p>那么tabs有哪些属性和事件呢？下面详细介绍一下: </p><hr> <a id="more"></a><h2 id="属性和事件详解"><a href="#属性和事件详解" class="headerlink" title="属性和事件详解"></a>属性和事件详解</h2><table><br>  <tr><br>    <th>标签</th><br>    <th>类型</th><br>    <th>作用</th><br>  </tr><br>  <tr><br>    <td>[root]</td><br>    <td>Page</td><br>    <td>指定tab希望加载的页面</td><br>  </tr><br>  <tr><br>    <td>tabTitle</td><br>    <td>string</td><br>    <td>tab上显示的标题</td><br>  </tr><br>  <tr><br>    <td>tabIcon</td><br>    <td>string</td><br>    <td>tab上显示的图标</td><br>  </tr><br>  <tr><br>    <td>tabBadge</td><br>    <td>string</td><br>    <td>tab上显示的角标数字</td><br>  </tr><br>  <tr><br>    <td>tabBadgeStyle</td><br>    <td>string</td><br>    <td>角标数字的颜色</td><br>  </tr><br> <tr><br>   <td>enabled</td><br>   <td>boolean</td><br>   <td>tab是否可用，默认为true</td><br> </tr><br> <tr><br>   <td>show</td><br>   <td>boolean</td><br>   <td>tab是否显示</td><br> </tr><br> <tr><br>   <td>[rootParams]</td><br>   <td>object</td><br>   <td>tab上传递的参数</td><br> </tr><br> <tr><br>   <td>tabUrlPath</td><br>   <td>string</td><br>   <td>点击tab时跳转的页面url</td><br> </tr><br> <tr><br>   <td>swipeBackEnabled</td><br>   <td>boolean</td><br>   <td>是否支持滑动后退</td><br> </tr><br> <tr><br>   <td>tabsHideOnSubPages</td><br>   <td>boolean</td><br>   <td>在子页面是否隐藏</td><br> </tr><br> <tr><br>   <td>(ionSelect)</td><br>   <td>方法</td><br>   <td>tab select 方法</td><br> </tr><br></table><ul><li>示例html代码如下:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-tabs</span> #<span class="attr">mainTabs</span> (<span class="attr">ionChange</span>)=<span class="string">"changeTabs()"</span> <span class="attr">color</span>=<span class="string">"danger"</span> <span class="attr">tabsHighlight</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab1Root"</span> [<span class="attr">rootParams</span>]=<span class="string">"homeParams"</span> <span class="attr">tabTitle</span>=<span class="string">"Home"</span> <span class="attr">tabIcon</span>=<span class="string">"home"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab2Root"</span> (<span class="attr">ionSelect</span>)=<span class="string">"selectFriend()"</span> <span class="attr">tabTitle</span>=<span class="string">"Friends"</span> <span class="attr">tabIcon</span>=<span class="string">"aperture"</span> <span class="attr">tabBadge</span>=<span class="string">"3"</span> <span class="attr">tabBadgeStyle</span>=<span class="string">"danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab3Root"</span> <span class="attr">enabled</span>=<span class="string">"false"</span>  <span class="attr">swipeBackEnabled</span>=<span class="string">"true"</span> <span class="attr">tabTitle</span>=<span class="string">"Contact"</span> <span class="attr">tabIcon</span>=<span class="string">"contacts"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>示例typeScript脚本代码如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomePage &#125; <span class="keyword">from</span> <span class="string">'../home/home'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AboutPage &#125; <span class="keyword">from</span> <span class="string">'../about/about'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ContactPage &#125; <span class="keyword">from</span> <span class="string">'../contact/contact'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tabs, ModalController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;templateUrl: <span class="string">'tabs.html'</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsPage &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">'mainTabs'</span>) tabRef: Tabs;</span><br><span class="line">  <span class="comment">// this tells the tabs component which Pages</span></span><br><span class="line">  <span class="comment">// should be each tab's root Page</span></span><br><span class="line">  <span class="comment">// 为tab标签指定导航至的页面</span></span><br><span class="line">  tab1Root: <span class="built_in">any</span> = HomePage;</span><br><span class="line">  tab2Root: <span class="built_in">any</span> = AboutPage;</span><br><span class="line">  tab3Root: <span class="built_in">any</span> = ContactPage;</span><br><span class="line">  <span class="comment">// 指定参数,在tab指向的页面可以读取到该参数</span></span><br><span class="line">  homeParams: <span class="built_in">any</span> = &#123;user1: <span class="string">'admin'</span>, user2: <span class="string">'ionic'</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> modalCtrl: ModalController</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  changeTabs = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'tab changed'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 选中tab页后的事件</span></span><br><span class="line">  selectFriend() &#123;</span><br><span class="line">    <span class="keyword">let</span> modal = <span class="keyword">this</span>.modalCtrl.create(ContactPage); <span class="comment">// 声明一个modal</span></span><br><span class="line">    modal.present(); <span class="comment">// 弹出modal</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ionViewDidEnter() &#123;</span><br><span class="line">    <span class="keyword">let</span> mainTabs = <span class="keyword">this</span>.tabRef;</span><br><span class="line">    mainTabs.select(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>home页使用参数示例代码如下：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="comment">// 引入NavParams</span></span><br><span class="line"><span class="keyword">import</span> &#123; NavController,NavParams &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">'page-home'</span>,</span><br><span class="line">    templateUrl: <span class="string">'home.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomePage &#123;</span><br><span class="line">    <span class="comment">// 在这里指定navParams</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> navCtrl: NavController,<span class="keyword">public</span> navParams:NavParams</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ionViewWillEnter()&#123;</span><br><span class="line">        <span class="comment">// 使用this.navParams.data可以读取tab页传过来的参数</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"NavParams:"</span>+<span class="keyword">this</span>.navParams.data.user1);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"NavParams:"</span>+<span class="keyword">this</span>.navParams.data.user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tabs（选项卡）&lt;br&gt;ion-tabs&lt;/p&gt;
&lt;p&gt;在一个 app 中，Tabs 使得在不同页面和功能之间导航更加容易。Tabs 组件，以 &lt;ion-tabs&gt; 的方式写，是单个 Tab 组件的容器。每个 &lt;ion-tab&gt; 对于 NavControll 来说是公开的组件。&lt;/ion-tab&gt;&lt;/ion-tabs&gt;&lt;/p&gt;
&lt;p&gt;那么tabs有哪些属性和事件呢？下面详细介绍一下: &lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/categories/ionic3/"/>
    
    
      <category term="ionic" scheme="https://github.com/alex-0407/tags/ionic/"/>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/tags/ionic3/"/>
    
  </entry>
  
  <entry>
    <title>ionic3中的gestures 手势事件归档</title>
    <link href="https://github.com/alex-0407/2018/06/02/ionic3-guestures/"/>
    <id>https://github.com/alex-0407/2018/06/02/ionic3-guestures/</id>
    <published>2018-06-02T03:11:11.000Z</published>
    <updated>2018-06-02T08:25:34.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ionic3中的gestures-手势事件如下："><a href="#ionic3中的gestures-手势事件如下：" class="headerlink" title="ionic3中的gestures 手势事件如下："></a>ionic3中的gestures 手势事件如下：</h3><p>ionic3中的gestures 手势事件包括: tap,  press,  pan,  swipe, rotate,  pinch 等事件，</p><p>tap    点击事件</p><p>press   长按事件</p><p>pan    滑动的时候触发的事件,滑动触发多次</p><p>swipe 滑动事件 滑动触发一次</p><p>rotate 旋转事件</p><p>pinch  捏合(pinch)手势</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ionic3中的gestures-手势事件如下：&quot;&gt;&lt;a href=&quot;#ionic3中的gestures-手势事件如下：&quot; class=&quot;headerlink&quot; title=&quot;ionic3中的gestures 手势事件如下：&quot;&gt;&lt;/a&gt;ionic3中的gestur
      
    
    </summary>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/categories/ionic3/"/>
    
    
      <category term="ionic" scheme="https://github.com/alex-0407/tags/ionic/"/>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/tags/ionic3/"/>
    
  </entry>
  
  <entry>
    <title>ionic3-awesome</title>
    <link href="https://github.com/alex-0407/2018/06/01/ionic3-awesome/"/>
    <id>https://github.com/alex-0407/2018/06/01/ionic3-awesome/</id>
    <published>2018-06-01T03:11:11.000Z</published>
    <updated>2018-06-07T01:55:07.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><hr></blockquote><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>此项目是ionic3开源项目 。贡献代码请提供email。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>ionic3 + cordova</p><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Alex-0407/ionic3-awesome</span><br><span class="line"></span><br><span class="line">cd ionic3-awesome </span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">ionic serve (运行开发模式)</span><br><span class="line"></span><br><span class="line">浏览器打开: http://localhost:8080</span><br><span class="line"></span><br><span class="line">ionic cordova run build android (安卓打包发布)</span><br><span class="line"></span><br><span class="line">ionic cordova run build ios (安卓打包发布)</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="demo演示"><a href="#demo演示" class="headerlink" title="demo演示"></a>demo演示</h3><aside id="platform-preview" class="platform-preview"><br>    <div id="demo-device-android" ng-class="previewPlatform" ng-show="androidActive" class="android" style=""><br>            <iframe id="demo-android" src="https://alex-0407.github.io/ionic3-awesome/#/index" frameborder="0"><br>            </iframe><br>        </div><br></aside><iframe frameborder="0" scrolling="0" width="90px" height="22px" src="https://ghbtns.com/github-btn.html?user=alex-0407&amp;repo=ionic3-awesome&amp;type=star&amp;count=true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;About&quot;&gt;&lt;a href=&quot;#About&quot; class=&quot;headerlink&quot; title=&quot;About&quot;&gt;&lt;/a&gt;About&lt;/h2&gt;&lt;p&gt;此项目是ionic3开源项目 。贡献代码请提供email。&lt;/p&gt;
&lt;h2 id=&quot;技术栈&quot;&gt;&lt;a href=&quot;#技术栈&quot; class=&quot;headerlink&quot; title=&quot;技术栈&quot;&gt;&lt;/a&gt;技术栈&lt;/h2&gt;&lt;p&gt;ionic3 + cordova&lt;/p&gt;
&lt;h2 id=&quot;项目运行&quot;&gt;&lt;a href=&quot;#项目运行&quot; class=&quot;headerlink&quot; title=&quot;项目运行&quot;&gt;&lt;/a&gt;项目运行&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/Alex-0407/ionic3-awesome&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ionic3-awesome &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ionic serve (运行开发模式)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;浏览器打开: http://localhost:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ionic cordova run build android (安卓打包发布)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ionic cordova run build ios (安卓打包发布)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/categories/ionic3/"/>
    
    
      <category term="ionic" scheme="https://github.com/alex-0407/tags/ionic/"/>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/tags/ionic3/"/>
    
  </entry>
  
  <entry>
    <title>ionic demo</title>
    <link href="https://github.com/alex-0407/2018/05/31/ionic-for100/"/>
    <id>https://github.com/alex-0407/2018/05/31/ionic-for100/</id>
    <published>2018-05-31T13:52:25.000Z</published>
    <updated>2018-06-07T01:55:07.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><strong><em>一个基于<code>ionic</code>的demo。</em></strong></p></blockquote><a id="more"></a><h3 id="demo演示"><a href="#demo演示" class="headerlink" title="demo演示"></a>demo演示</h3><p><aside id="platform-preview" class="platform-preview"><br>    <div id="demo-device-android" ng-class="previewPlatform" ng-show="androidActive" class="android" style=""><br>            <iframe id="demo-android" src="https://alex-0407.github.io/ionic-for100/#/index" frameborder="0"><br>            </iframe><br>        </div><br></aside><br></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;一个基于&lt;code&gt;ionic&lt;/code&gt;的demo。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ionic" scheme="https://github.com/alex-0407/categories/ionic/"/>
    
    
      <category term="ionic" scheme="https://github.com/alex-0407/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令清单，非常实用</title>
    <link href="https://github.com/alex-0407/2017/03/06/git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>https://github.com/alex-0407/2017/03/06/git命令清单/</id>
    <published>2017-03-06T08:30:11.000Z</published>
    <updated>2018-06-04T01:24:42.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p><p><img src="https://upload-images.jianshu.io/upload_images/3100736-68e14af77c172806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"></p><p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><p>Workspace：工作区</p><p>Index / Stage：暂存区</p><p>Repository：仓库区（或本地仓库）</p><p>Remote：远程仓库</p><hr>  <a id="more"></a><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><p>在当前目录新建一个Git代码库$ git init</p><p>新建一个目录，将其初始化为Git代码库$ git init[project-name]</p><p>下载一个项目和它的整个代码历史$ git clone[url]</p><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><p>显示当前的Git配置$ git config–list</p><p>编辑Git配置文件$ git config-e[–global]</p><p>设置提交代码时的用户信息$ git config[–global]user.name”[name]”$ git config[–global]user.email”[email address]”</p><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><p>添加指定文件到暂存区$ git add[file1][file2]…</p><p>添加指定目录到暂存区，包括子目录$ git add[dir]</p><p>添加当前目录的所有文件到暂存区$ git add.</p><p>添加每个变化前，都会要求确认</p><p>对于同一个文件的多处变化，可以实现分次提交$ git add-p</p><p>删除工作区文件，并且将这次删除放入暂存区$ git rm[file1][file2]…</p><p>停止追踪指定文件，但该文件会保留在工作区$ git rm–cached[file]</p><p>改名文件，并且将这个改名放入暂存区$ git mv[file-original][file-renamed]</p><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><p>提交暂存区到仓库区$ git commit-m[message]</p><p>提交暂存区的指定文件到仓库区$ git commit[file1][file2]…-m[message]</p><p>提交工作区自上次commit之后的变化，直接到仓库区$ git commit-a</p><p>提交时显示所有diff信息$ git commit-v</p><p>使用一次新的commit，替代上一次提交</p><p>如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit–amend-m[message]</p><p>重做上一次commit，并包括指定文件的新变化$ git commit–amend[file1][file2]…</p><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><p>列出所有本地分支$ git branch</p><p>列出所有远程分支$ git branch-r</p><p>列出所有本地分支和远程分支$ git branch-a</p><p>新建一个分支，但依然停留在当前分支$ git branch[branch-name]</p><p>新建一个分支，并切换到该分支$ git checkout-b[branch]</p><p>新建一个分支，指向指定commit$ git branch[branch][commit]</p><p>新建一个分支，与指定的远程分支建立追踪关系$ git branch–track[branch][remote-branch]</p><p>切换到指定分支，并更新工作区$ git checkout[branch-name]</p><p>切换到上一个分支$ git checkout-</p><p>建立追踪关系，在现有分支与指定的远程分支之间$ git branch–set-upstream[branch][remote-branch]</p><p>合并指定分支到当前分支$ git merge[branch]</p><p>选择一个commit，合并进当前分支$ git cherry-pick[commit]</p><p>删除分支$ git branch-d[branch-name]</p><p>删除远程分支$ git push origin–delete[branch-name]$ git branch-dr[remote/branch]</p><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><p>列出所有tag$ git tag</p><p>新建一个tag在当前commit$ git tag[tag]</p><p>新建一个tag在指定commit$ git tag[tag][commit]</p><p>删除本地tag$ git tag-d[tag]</p><p>删除远程tag$ git push origin:refs/tags/[tagName]</p><p>查看tag信息$ git show[tag]</p><p>提交指定tag$ git push[remote][tag]</p><p>提交所有tag$ git push[remote]–tags</p><p>新建一个分支，指向某个tag$ git checkout-b[branch][tag]</p><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><p>显示有变更的文件$ git status</p><p>显示当前分支的版本历史$ git log</p><p>显示commit历史，以及每次commit发生变更的文件$ git log–stat</p><p>搜索提交历史，根据关键词$ git log-S[keyword]</p><p>显示某个commit之后的所有变动，每个commit占据一行$ git log[tag]HEAD–pretty=format:%s</p><p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件$ git log[tag]HEAD–grep feature</p><p>显示某个文件的版本历史，包括文件改名$ git log–follow[file]$ git whatchanged[file]</p><p>显示指定文件相关的每一次diff$ git log-p[file]</p><p>显示过去5次提交$ git log-5–pretty–oneline</p><p>显示所有提交过的用户，按提交次数排序$ git shortlog-sn</p><p>显示指定文件是什么人在什么时间修改过$ git blame[file]</p><p>显示暂存区和工作区的差异$ git diff</p><p>显示暂存区和上一个commit的差异$ git diff–cached[file]</p><p>显示工作区与当前分支最新commit之间的差异$ git diff HEAD</p><p>显示两次提交之间的差异$ git diff[first-branch]…[second-branch]</p><p>显示今天你写了多少行代码$ git diff–shortstat”@{0 day ago}”</p><p>显示某次提交的元数据和内容变化$ git show[commit]</p><p>显示某次提交发生变化的文件$ git show–name-only[commit]</p><p>显示某次提交时，某个文件的内容$ git show[commit]:[filename]</p><p>显示当前分支的最近几次提交$ git reflog</p><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><p>下载远程仓库的所有变动$ git fetch[remote]</p><p>显示所有远程仓库$ git remote-v</p><p>显示某个远程仓库的信息$ git remote show[remote]</p><p>增加一个新的远程仓库，并命名$ git remote add[shortname][url]</p><p>取回远程仓库的变化，并与本地分支合并$ git pull[remote][branch]</p><p>上传本地指定分支到远程仓库$ git push[remote][branch]</p><p>强行推送当前分支到远程仓库，即使有冲突$ git push[remote]–force</p><p>推送所有分支到远程仓库$ git push[remote]–all</p><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><p>恢复暂存区的指定文件到工作区$ git checkout[file]</p><p>恢复某个commit的指定文件到暂存区和工作区$ git checkout[commit][file]</p><p>恢复暂存区的所有文件到工作区$ git checkout.</p><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset[file]</p><p>重置暂存区与工作区，与上一次commit保持一致$ git reset–hard</p><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset[commit]</p><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset–hard[commit]</p><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset–keep[commit]</p><p>新建一个commit，用来撤销指定commit</p><p>后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert[commit]</p><p>暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</p><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><p>生成一个可供发布的压缩包$ git archive</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3100736-68e14af77c172806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。&lt;/p&gt;
&lt;p&gt;Workspace：工作区&lt;/p&gt;
&lt;p&gt;Index / Stage：暂存区&lt;/p&gt;
&lt;p&gt;Repository：仓库区（或本地仓库）&lt;/p&gt;
&lt;p&gt;Remote：远程仓库&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="git" scheme="https://github.com/alex-0407/categories/git/"/>
    
    
      <category term="git" scheme="https://github.com/alex-0407/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>两种方法轻松搞定NodeJS实时编译，动态调试</title>
    <link href="https://github.com/alex-0407/2017/03/06/nodejs%E5%AE%9E%E6%97%B6%E7%BC%96%E8%AF%91%E5%92%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    <id>https://github.com/alex-0407/2017/03/06/nodejs实时编译和动态调试/</id>
    <published>2017-03-06T08:30:11.000Z</published>
    <updated>2018-06-04T01:24:42.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><h2 id="Node-js开发中遇到这样的问题"><a href="#Node-js开发中遇到这样的问题" class="headerlink" title="Node.js开发中遇到这样的问题"></a>Node.js开发中遇到这样的问题</h2><p>总是重新读取并解析脚本(如果没有专门的优化配置)。Node.js的这种设计虽然有利于提高性能，却不利于开发调试，因为我们在开发过程中总是希望修改后立即看到效果，而不是每次都要终止进程并重启。</p><p>这时若你修改了js文件，或是调试功能，或是增加功能。这时需要重新发布该服务，每次修改都需要执行以下两步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">control+c</span><br><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>很不爽有木有！因此有人开发了一个自动发布（热发布）的工具，你只需要在修改文件后保存，它就能自动替你发布，这就是所谓的热部署。就像tomcat或websphere等一些主流的web应用服务器那样保存即热部署。下面将介绍两个NodeJS中的开源热部署工具。</p><hr>  <a id="more"></a><h2 id="1-supervisor"><a href="#1-supervisor" class="headerlink" title="(1)supervisor"></a>(1)supervisor</h2><p>supervisor 可以帮助你实现这个功能，它会监视你对代码的改动，并自动重启 Node.js。使用方法很简单，首先使用 npm 安装 supervisor：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g supervisor</span><br></pre></td></tr></table></figure><p>如果你使用的是 Linux 或 Mac，直接键入上面的命令很可能会有权限错误。原因是 npm需要把 supervisor 安装到系统目录，需要管理员授权，可以使用 sudo npm install -g supervisor 命令来安装。</p><p>接下来，使用 supervisor 命令启动 app.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisor app.js</span><br></pre></td></tr></table></figure><p>命令行窗口会显示启动成功信息，即开启了代码监听。</p><p>当代码被改动时，运行的脚本会被终止，然后重新启动。</p><p>supervisor 这个小工具可以解决开发中的调试问题。</p><p>github地址：<a href="https://github.com/isaacs/node-supervisor">https://github.com/isaacs/node-supervisor</a></p><h2 id="2-hotnode"><a href="#2-hotnode" class="headerlink" title="(2)hotnode"></a>(2)hotnode</h2><p>首先需要安装，打开NodeJS命令行工具，输入sudo npm -g install hotcode进行全局安装</p><p>安装成功后，可以随时查看它的版本号，在命令行输入：hotcode -v</p><p>使用很简单，执行命令:hotcode server.js。</p><p>每次修改都会有一条日志打印出来。</p><p>github地址：<a href="https://github.com/saschagehlich/hotnode">https://github.com/saschagehlich/hotnode</a></p><h2 id="nodejs-express入门示例"><a href="#nodejs-express入门示例" class="headerlink" title="nodejs + express入门示例"></a>nodejs + express入门示例</h2><p>nodejs + express入门示例： <a href="https://github.com/alex-0407/node-server">https://github.com/alex-0407/node-server</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Node-js开发中遇到这样的问题&quot;&gt;&lt;a href=&quot;#Node-js开发中遇到这样的问题&quot; class=&quot;headerlink&quot; title=&quot;Node.js开发中遇到这样的问题&quot;&gt;&lt;/a&gt;Node.js开发中遇到这样的问题&lt;/h2&gt;&lt;p&gt;总是重新读取并解析脚本(如果没有专门的优化配置)。Node.js的这种设计虽然有利于提高性能，却不利于开发调试，因为我们在开发过程中总是希望修改后立即看到效果，而不是每次都要终止进程并重启。&lt;/p&gt;
&lt;p&gt;这时若你修改了js文件，或是调试功能，或是增加功能。这时需要重新发布该服务，每次修改都需要执行以下两步：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;control+c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node server.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很不爽有木有！因此有人开发了一个自动发布（热发布）的工具，你只需要在修改文件后保存，它就能自动替你发布，这就是所谓的热部署。就像tomcat或websphere等一些主流的web应用服务器那样保存即热部署。下面将介绍两个NodeJS中的开源热部署工具。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="nodejs" scheme="https://github.com/alex-0407/categories/nodejs/"/>
    
    
      <category term="node" scheme="https://github.com/alex-0407/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>webpack loader全家桶</title>
    <link href="https://github.com/alex-0407/2017/03/06/webpack%20loader%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    <id>https://github.com/alex-0407/2017/03/06/webpack loader全家桶/</id>
    <published>2017-03-06T08:30:11.000Z</published>
    <updated>2018-06-04T01:24:42.045Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><p>webpack的loaders是一大特色，也是很重要的一部分。下面介绍一些常用的loader。</p><hr>  <a id="more"></a><h2 id="loaders之-js处理"><a href="#loaders之-js处理" class="headerlink" title="loaders之 js处理"></a>loaders之 js处理</h2><p>babel-loader</p><p>jsx-loader</p><p>npm install –save-dev babel-core babel-preset-es2015 babel-loader jsx-loader</p><h2 id="loaders之预处理"><a href="#loaders之预处理" class="headerlink" title="loaders之预处理"></a>loaders之预处理</h2><p>css-loader 处理css中路径引用等问题</p><p>style-loader 动态把样式写入css</p><p>sass-loader scss编译器</p><p>less-loader less编译器</p><p>postcss-loader scss再处理</p><p>npm install –save -dev css-loader style-loader sass-loader less-loader postcss-loader</p><h2 id="loaders之-json处理"><a href="#loaders之-json处理" class="headerlink" title="loaders之 json处理"></a>loaders之 json处理</h2><p>json-loader</p><p>npm install –save-dev json-loader</p><h2 id="loaders之-图片处理"><a href="#loaders之-图片处理" class="headerlink" title="loaders之 图片处理"></a>loaders之 图片处理</h2><p>url-loader</p><p>npm install –save-dev url-loader</p><h2 id="loaders之-文件处理"><a href="#loaders之-文件处理" class="headerlink" title="loaders之 文件处理"></a>loaders之 文件处理</h2><p>file-loader</p><p>npm install –save-dev file-loader</p><h2 id="loaders之-html处理"><a href="#loaders之-html处理" class="headerlink" title="loaders之 html处理"></a>loaders之 html处理</h2><p>raw-loader</p><p>npm install –save-dev raw-loader</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;p&gt;webpack的loaders是一大特色，也是很重要的一部分。下面介绍一些常用的loader。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://github.com/alex-0407/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://github.com/alex-0407/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue移动端框架到底哪家强</title>
    <link href="https://github.com/alex-0407/2017/03/06/vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>https://github.com/alex-0407/2017/03/06/vue移动端框架/</id>
    <published>2017-03-06T08:30:11.000Z</published>
    <updated>2018-06-04T01:24:42.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><h2 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h2><p>2016年4月21日，阿里巴巴在Qcon大会上宣布跨平台移动开发工具Weex开放内测邀请。</p><p>Weex</p><p>是一套简单易用的跨平台开发方案，能以 web 的开发体验构建高性能、可扩展的 native 应用，为了做到这些，Weex 与 Vue</p><p>合作，使用 Vue 作为上层框架，并遵循 W3C 标准实现了统一的 JSEngine 和 DOM API，这样一来，你甚至可以使用其他框架驱动</p><p>Weex，打造三端一致的 native 应用。</p><p>Weex能够完美兼顾性能与动态性，支持iOS、安卓、YunOS及Web等多端部署。</p><hr>  <a id="more"></a><p>其工作原理</p><p>Weex</p><p>表面上是一个客户端技术，但实际上它串联起了从本地开发环境到云端部署和分发的整个链路。开发者首先可以在本地像撰写 web 页面一样撰写一个</p><p>app 的页面，然后编译成一段 JavaScript 代码，形成 Weex 的一个 JS bundle；在云端，开发者可以把生成的 JS</p><p>bundle 部署上去，然后通过网络请求或预下发的方式传递到用户的移动应用客户端；在移动应用客户端里，WeexSDK 会准备好一个</p><p>JavaScript 引擎，并且在用户打开一个 Weex 页面时执行相应的 JS bundle，并在执行过程中产生各种命令发送到 native</p><p>端进行的界面渲染或数据存储、网络通信、调用设备功能、用户交互响应等移动应用的场景实践；同时，如果用户没有安装移动应用，他仍然可以在浏览器里打开一个相同的</p><p>web 页面，这个页面是使用相同的页面源代码，通过浏览器里的 JavaScript 引擎运行起来的。</p><h2 id="Mint-UI"><a href="#Mint-UI" class="headerlink" title="Mint UI"></a>Mint UI</h2><p>基于 Vue.js 的移动端组件库</p><p>Mint UI 包含丰富的 CSS 和 JS 组件，能够满足日常的移动端开发需要。通过它，可以快速构建出风格统一的页面，提升开发效率。</p><p>真正意义上的按需加载组件。可以只加载声明过的组件及其样式文件，无需再纠结文件体积过大。</p><p>考虑到移动端的性能门槛，Mint UI 采用 CSS3 处理各种动效，避免浏览器进行不必要的重绘和重排，从而使用户获得流畅顺滑的体验。</p><p>依托 Vue.js 高效的组件化方案，Mint UI 做到了轻量化。即使全部引入，压缩后的文件体积也仅有 ~30kb (JS + CSS) gzip。</p><h2 id="vue-carbon"><a href="#vue-carbon" class="headerlink" title="vue-carbon"></a>vue-carbon</h2><p>基于 vuejs 1.0 开发 material design 风格的移动端 WEB UI 库</p><p>使用文档地址 <a href="https://myronliu347.github.io/vue-carbon/book/v0.5.0/index.html" target="_blank" rel="noopener">https://myronliu347.github.io/vue-carbon/book/v0.5.0/index.html</a></p><h2 id="Muse-UI"><a href="#Muse-UI" class="headerlink" title="Muse-UI"></a>Muse-UI</h2><p>基于 Vue 2.0 和 Material Desigin 的 UI 组件库</p><p>特性</p><p>1.组件丰富</p><p>Muse UI 基本实现了 Material Design 设计规范类的所有组件，另外还开发许多的功能性的组件</p><p>2.可定制</p><p>Muse UI 使用less文件，所有的颜色都有一个变量维护，通过编写 less 文件完成自定义主题，另外组件内部也提供一些修改效果的参数</p><p>3.基于 Vue 2.0</p><p>Muse UI 基于 Vue2.0 开发，Vue2.0是当下最快的前端框架之一，小巧，api友好，可用于开发的复杂单页应用</p><h2 id="VUWE"><a href="#VUWE" class="headerlink" title="VUWE"></a>VUWE</h2><p>vuwe是一款基于微信WeUI所开发的，专用于Vue2的组件库。</p><p>它与WeUI完全解耦。用户通过自定义WeUI的样式文件，可以方便地对VUWE实现定制化。</p><h2 id="vue-mobile"><a href="#vue-mobile" class="headerlink" title="vue-mobile"></a>vue-mobile</h2><p>vue-mobile is an UI Framework build with Vue.js for SPA:</p><p>Full Page Structure - header, content, footer</p><p>Page transition support by vue-router</p><p>Bunch of Powerful Components, easy to use and extend</p><p>high performance CSS3 Animation</p><p>1px border for all components - as well as round border</p><p>Write with Vue - the most important</p><h2 id="vonic"><a href="#vonic" class="headerlink" title="vonic"></a>vonic</h2><p>一个基于 vue.js 和 ionic 样式的 UI 框架，用于快速构建移动端单页应用。</p><p>和 ionic 的关系：没有关系，只是在样式方面以 ionic 的 css 文件为基础（做了一些调整）</p><h2 id="vux"><a href="#vux" class="headerlink" title="vux"></a>vux</h2><p>Vux（读音 [v’ju:z]，同views）是基于WeUI和Vue(2.x)开发的移动端UI组件库，主要服务于微信页面。</p><p>基于webpack+vue-loader+vux可以快速开发移动端页面，配合vux-loader方便你在WeUI的基础上定制需要的样式。</p><p>vux-loader保证了组件按需使用，因此不用担心最终打包了整个vux的组件库代码。</p><p>vux并不完全依赖于WeUI，但是尽量保持整体UI样式接近WeUI的设计规范。最初目标是创建一个易用，实用，美观的移动端UI组件库，现在离理想状态还有不少距离，因此需要大家及时反馈问题及贡献代码。</p><p>即使你不使用vux的代码, 但能从源码得到一些参考那么也是件让人高兴的事情。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Weex&quot;&gt;&lt;a href=&quot;#Weex&quot; class=&quot;headerlink&quot; title=&quot;Weex&quot;&gt;&lt;/a&gt;Weex&lt;/h2&gt;&lt;p&gt;2016年4月21日，阿里巴巴在Qcon大会上宣布跨平台移动开发工具Weex开放内测邀请。&lt;/p&gt;
&lt;p&gt;Weex&lt;/p&gt;
&lt;p&gt;是一套简单易用的跨平台开发方案，能以 web 的开发体验构建高性能、可扩展的 native 应用，为了做到这些，Weex 与 Vue&lt;/p&gt;
&lt;p&gt;合作，使用 Vue 作为上层框架，并遵循 W3C 标准实现了统一的 JSEngine 和 DOM API，这样一来，你甚至可以使用其他框架驱动&lt;/p&gt;
&lt;p&gt;Weex，打造三端一致的 native 应用。&lt;/p&gt;
&lt;p&gt;Weex能够完美兼顾性能与动态性，支持iOS、安卓、YunOS及Web等多端部署。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="https://github.com/alex-0407/categories/vue/"/>
    
    
      <category term="vue" scheme="https://github.com/alex-0407/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>angular2入门，就这一篇就够了</title>
    <link href="https://github.com/alex-0407/2017/03/06/angular2%E5%85%A5%E9%97%A8/"/>
    <id>https://github.com/alex-0407/2017/03/06/angular2入门/</id>
    <published>2017-03-06T08:30:11.000Z</published>
    <updated>2018-06-04T01:24:42.019Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><h2 id="背景与概念："><a href="#背景与概念：" class="headerlink" title="背景与概念："></a>背景与概念：</h2><p>AngularJS2 是一款开源JavaScript库，由Google维护，用来协助单一页面应用程序运行。</p><p>AngularJS2 是 Angular 1.x 的升级版本，性能上得到显著的提高，能很好的支持 Web 开发组件。</p><p>AngularJS2 发布于2016年9月份，它是基于ES6来开发的。</p><p>Angular2.x与Angular1.x 的区别</p><p>Angular2.x与Angular1.x 的区别类似 Java 和 JavaScript 或者说是雷锋与雷峰塔的区别，所以在学习Angular2.x时大家需要做好重新学习一门语言的心里准备。</p><h2 id="开工前的准备工作"><a href="#开工前的准备工作" class="headerlink" title="开工前的准备工作"></a>开工前的准备工作</h2><p>学习AngularJS2前，你需要具备基本的前端基础：HTML、CSS、JavaScript。此外你还需要了解 NPM 及 TypeScript。</p><hr> <a id="more"></a><h2 id="Angular-2-架构"><a href="#Angular-2-架构" class="headerlink" title="Angular 2 架构"></a>Angular 2 架构</h2><p>Angular 2 应用程序应用主要由以下 8 个部分组成：</p><p>1、模块 (Modules)</p><p>2、组件 (Components)</p><p>3、模板 (Templates)</p><p>4、元数据 (Metadata)</p><p>5、数据绑定 (Data Binding)</p><p>6、指令 (Directives)</p><p>7、服务 (Services)</p><p>8、依赖注入 (Dependency Injection)</p><p>下面看每个部分是如何相互工作的：</p><p>模板 (Templates)是由 Angular 扩展的 HTML 语法组成，组件 (Components)类用来管理这些模板，应用逻辑部分通过服务 (Services)来完成，然后在模块中打包服务与组件，最后通过引导根模块来启动应用。</p><p>接下来对以上 8 个部分分开解析：</p><h3 id="1-模块"><a href="#1-模块" class="headerlink" title="1.模块"></a>1.模块</h3><p>模块又一块代码组成，可用于执行一个简单的任务。</p><p>Angular 应用是由模块化的，它有自己的模块系统：NgModules。</p><p>每个 Angular 应该至少要有一个模块(根模块)，一般可以命名为：AppModule。</p><p>Angular 模块是一个带有 @NgModule 装饰器的类，它接收一个用来描述模块属性的元数据对象。</p><p>几个重要的属性如下：</p><p>declarations （声明）- 视图类属于这个模块。 Angular 有三种类型的视图类： 组件 、 指令 和 管道 。</p><p>exports- 声明（ declaration ）的子集，可用于其它模块中的组件模板 。</p><p>imports- 本模块组件模板中需要由其它导出类的模块。</p><p>providers- 服务的创建者。本模块把它们加入全局的服务表中，让它们在应用中的任何部分都可被访问到。</p><p>bootstrap- 应用的主视图，称为根组件，它是所有其它应用视图的宿主。只有根模块需要设置 bootstrap 属性中。</p><p>一个最简单的根模块，eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;NgModule&#125;<span class="keyword">from</span><span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;BrowserModule&#125;<span class="keyword">from</span><span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;<span class="attr">imports</span>: [BrowserModule],</span><br><span class="line"></span><br><span class="line">providers: [Logger],</span><br><span class="line"></span><br><span class="line">declarations: [AppComponent],</span><br><span class="line"></span><br><span class="line">exports: [AppComponent],</span><br><span class="line"></span><br><span class="line">bootstrap: [AppComponent]&#125;)exportclassAppModule&#123;&#125;</span><br></pre></td></tr></table></figure><p>接下来通过引导根模块来启动应用，开发过程通常在 main.ts 文件中来引导 AppModule ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;platformBrowserDynamic&#125;<span class="keyword">from</span><span class="string">'@angular/platform-browser-dynamic'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>&#123;AppModule&#125;<span class="keyword">from</span><span class="string">'./app.module'</span>;</span><br><span class="line"></span><br><span class="line">platformBrowserDynamic().bootstrapModule(AppModule);</span><br></pre></td></tr></table></figure><h3 id="2-组件-Components"><a href="#2-组件-Components" class="headerlink" title="2.组件(Components)"></a>2.组件(Components)</h3><p>组件是一个模板的控制类用于处理应用和逻辑页面的视图部分。</p><p>组件是构成 Angular 应用的基础和核心，可用于整个应用程序中。</p><p>组件知道如何渲染自己及配置依赖注入。</p><p>组件通过一些由属性和方法组成的 API 与视图交互。</p><p>创建 Angular 组件的方法有三步：</p><p>从 @angular/core 中引入 Component 修饰器</p><p>建立一个普通的类，并用 @Component 修饰它</p><p>在 @Component 中，设置 selector自定义标签，以及 template模板</p><h3 id="3-模板-Templates"><a href="#3-模板-Templates" class="headerlink" title="3.模板(Templates)"></a>3.模板(Templates)</h3><p>Angular模板的默认语言就是HTML。</p><p>我们可以通过使用模板来定义组件的视图来告诉 Angular 如何显示组件。以下是一个简单是实例：</p><p>网站地址 : [object Object]</p><h3 id="4-元数据-Metadata"><a href="#4-元数据-Metadata" class="headerlink" title="4.元数据(Metadata)"></a>4.元数据(Metadata)</h3><p>元数据告诉 Angular 如何处理一个类。</p><p>考虑以下情况我们有一个组件叫作 Component ，它是一个类，直到我们告诉 Angular 这是一个组件为止。</p><p>你可以把元数据附加到这个类上来告诉 Angular Component 是一个组件。</p><p>在 TypeScript 中，我们用 装饰器 (decorator) 来附加元数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">eg：</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line"></span><br><span class="line">selector : <span class="string">'mylist'</span>,</span><br><span class="line"></span><br><span class="line">template : <span class="string">'菜鸟教程'</span></span><br><span class="line"></span><br><span class="line">directives : [ComponentDetails]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ListComponent</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>@Component 装饰器能接受一个配置对象，并把紧随其后的类标记成了组件类。</p><p>Angular 会基于这些信息创建和展示组件及其视图。</p><p>@Component 中的配置项说明：</p><p>selector- 一个 css 选择器，它告诉 Angular 在 父级 HTML 中寻找一个  标签，然后创建该组件，并插入此标签中。</p><p>templateUrl- 组件 HTML 模板的地址。</p><p>directives- 一个数组，包含 此 模板需要依赖的组件或指令。</p><p>providers- 一个数组，包含组件所依赖的服务所需要的依赖注入提供者。</p><h3 id="5-数据绑定-Data-binding"><a href="#5-数据绑定-Data-binding" class="headerlink" title="5.数据绑定(Data binding)"></a>5.数据绑定(Data binding)</h3><p>数据绑定为应用程序提供了一种简单而一致的方法来显示数据以及数据交互，它是管理应用程序里面数值的一种机制。</p><p>通过这种机制，可以从HTML里面取值和赋值，使得数据的读写，数据的持久化操作变得更加简单快捷。</p><p>插值: 在 HTML 标签中显示组件值。</p>angular2入门，就这一篇就够了<p>属性绑定: 把元素的属性设置为组件中属性的值。</p><p>事件绑定: 在组件方法名被点击时触发。</p><p>双向绑: 使用Angular里的NgModel指令可以更便捷的进行双向绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(input)=<span class="string">"currentUser.firstName=$event.target.value"</span> &gt;</span><br></pre></td></tr></table></figure><h3 id="6-指令（Directives）"><a href="#6-指令（Directives）" class="headerlink" title="6.指令（Directives）"></a>6.指令（Directives）</h3><p>Angular模板是动态的 。当 Angular 渲染它们时，它会根据指令对 DOM 进行修改。</p><p>指令是一个带有”指令元数据”的类。在 TypeScript 中，要通过 @Directive 装饰器把元数据附加到类上。</p><p>在Angular中包含以下三种类型的指令：</p><p>属性指令：以元素的属性形式来使用的指令。</p><p>结构指令：用来改变DOM树的结构</p><p>组件：作为指令的一个重要子类，组件本质上可以看作是一个带有模板的指令。</p><p>*ngFor 告诉 Angular 为 sites 列表中的每个项生成一个</p><p>标签。</p><p>*ngIf 表示只有在选择的项存在时，才会包含 SiteDetail 组件。</p><h3 id="7-服务-Services"><a href="#7-服务-Services" class="headerlink" title="7.服务(Services)"></a>7.服务(Services)</h3><p>Angular2中的服务是封装了某一特定功能，并且可以通过注入的方式供他人使用的独立模块。</p><p>服务分为很多种，包括：值、函数，以及应用所需的特性。</p><p>例如，多个组件中出现了重复代码时，把重复代码提取到服务中实现代码复用。</p><p>以下是几种常见的服务：</p><p>日志服务</p><p>数据服务</p><p>消息总线</p><p>税款计算器</p><p>应用程序配置</p><p>以下实例是一个日志服务，用于把日志记录到浏览器的控制台：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">log(msg: any) &#123; <span class="built_in">console</span>.log(msg); &#125;</span><br><span class="line"></span><br><span class="line">error(msg: any) &#123; <span class="built_in">console</span>.error(msg); &#125;</span><br><span class="line"></span><br><span class="line">warn(msg: any) &#123; <span class="built_in">console</span>.warn(msg); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-依赖注入"><a href="#8-依赖注入" class="headerlink" title="8.依赖注入"></a>8.依赖注入</h3><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫”依赖查找”（Dependency Lookup）。</p><p>通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><p>在传统的开发模式中，调用者负责管理所有对象的依赖，循环依赖一直是梦魇，而在依赖注入模式中，这个管理权交给了注入器(Injector)，它在软件运行时负责依赖对象的替换，而不是在编译时。这种控制反转，运行注入的特点即是依赖注入的精华所在。</p><p>Angular 能通过查看构造函数的参数类型，来得知组件需要哪些服务。 例如， SiteListComponent 组件的构造函数需要一个 SiteService:</p><p>constructor(private service: HeroService) { }</p><p>当 Angular 创建组件时，会首先为组件所需的服务找一个注入器（ Injector ） 。</p><p>注入器是一个维护服务实例的容器，存放着以前创建的实例。</p><p>如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给 Angular 。</p><p>当所有的服务都被解析完并返回时， Angular 会以这些服务为参数去调用组件的构造函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背景与概念：&quot;&gt;&lt;a href=&quot;#背景与概念：&quot; class=&quot;headerlink&quot; title=&quot;背景与概念：&quot;&gt;&lt;/a&gt;背景与概念：&lt;/h2&gt;&lt;p&gt;AngularJS2 是一款开源JavaScript库，由Google维护，用来协助单一页面应用程序运行。&lt;/p&gt;
&lt;p&gt;AngularJS2 是 Angular 1.x 的升级版本，性能上得到显著的提高，能很好的支持 Web 开发组件。&lt;/p&gt;
&lt;p&gt;AngularJS2 发布于2016年9月份，它是基于ES6来开发的。&lt;/p&gt;
&lt;p&gt;Angular2.x与Angular1.x 的区别&lt;/p&gt;
&lt;p&gt;Angular2.x与Angular1.x 的区别类似 Java 和 JavaScript 或者说是雷锋与雷峰塔的区别，所以在学习Angular2.x时大家需要做好重新学习一门语言的心里准备。&lt;/p&gt;
&lt;h2 id=&quot;开工前的准备工作&quot;&gt;&lt;a href=&quot;#开工前的准备工作&quot; class=&quot;headerlink&quot; title=&quot;开工前的准备工作&quot;&gt;&lt;/a&gt;开工前的准备工作&lt;/h2&gt;&lt;p&gt;学习AngularJS2前，你需要具备基本的前端基础：HTML、CSS、JavaScript。此外你还需要了解 NPM 及 TypeScript。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="angular2" scheme="https://github.com/alex-0407/categories/angular2/"/>
    
    
      <category term="angular" scheme="https://github.com/alex-0407/tags/angular/"/>
    
      <category term="angular2" scheme="https://github.com/alex-0407/tags/angular2/"/>
    
  </entry>
  
  <entry>
    <title>你不得不知的Ionic3新特性</title>
    <link href="https://github.com/alex-0407/2017/03/06/%E4%BD%A0%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E7%9A%84Ionic3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://github.com/alex-0407/2017/03/06/你不得不知的Ionic3新特性/</id>
    <published>2017-03-06T08:30:11.000Z</published>
    <updated>2018-06-04T01:24:42.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><p>Ionic3新特性：</p><h2 id="Angular-4-0"><a href="#Angular-4-0" class="headerlink" title="Angular 4.0"></a>Angular 4.0</h2><p>新的版本下，改进 AOT 编译器，分离 animations 包，缩小生成后的代码量，运行更快，改进ngIf 和ngFor 等具体内容可以访问<a href="http://angularjs.blogspot.sg/2017/03/angular-400-now-available.html来查看。" target="_blank" rel="noopener">http://angularjs.blogspot.sg/2017/03/angular-400-now-available.html来查看。</a></p><h2 id="typescript-2-1-2-2的支持"><a href="#typescript-2-1-2-2的支持" class="headerlink" title="typescript 2.1, 2.2的支持"></a>typescript 2.1, 2.2的支持</h2><p>这一次的更新将提升typescript应用构建和类型检查的速度并且引入了对mix-in的支持等具体可以访问<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html来查看。" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html来查看。</a></p><hr> <a id="more"></a><h2 id="IonicPage装饰器"><a href="#IonicPage装饰器" class="headerlink" title="@IonicPage装饰器"></a>@IonicPage装饰器</h2><p>ionic2中导航器不是基于url的，如果想使用url访问就要通过DeepLinker来实现，这是非常麻烦的，而在新版本我们可以通过@IonicPage装饰器来实现。并且可以更轻松的在项目中设置延迟加载，设置延迟加载页面的优先级，并为每个页面自定义配置。</p><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>Ionic3.0版本开始，支持了延迟加载，我们可以将某些模块设置为延时加载，只有用户打开相关的页面的时候，这个模块所在的js才会被下载，这样能减少用户初次下载的文件的大小。</p><p>总的来说，升级Ionic3将使我们的项目变得更小，更快，而更吸引我们的则是懒加载，不仅仅是加快了app首次的启动时间，更多的是配合上@IonicPage可以非常方便部署web版本，让每次进入不用去请求庞大的js文件，做到首屏的快速加载，write once run anywhere，这些就是我们需要升级Ionic3的原因。</p><p>那么，问题来了，怎样升级到Ionic3呢？</p><p>首先访问<a href="https://github.com/ionic-team/ionic2-app-base/复制package.json的dependencies和devDependencies到自己的项目中后删除掉原本的node_modules文件夹，运行npm">https://github.com/ionic-team/ionic2-app-base/复制package.json的dependencies和devDependencies到自己的项目中后删除掉原本的node_modules文件夹，运行npm</a> install重新下载依赖。</p><p>将BrowserModule加入你的app/app.module.ts<br>import { BrowserModule } from ‘@angular/platform-browser’;<br>在app.module.ts中将BrowserModule添加进imports中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imports: [   BrowserModule,   IonicModule.forRoot(MyApp) ],</span><br></pre></td></tr></table></figure><p>由于ionic3将ionic-native拆开成个各种小的包@ionic-native/*,splash-screen，status-bar等之前ionic-native中的模块都需要重新引入具体可以参照<a href="http://ionicframework.com/docs/native/来对号入座。" target="_blank" rel="noopener">http://ionicframework.com/docs/native/来对号入座。</a></p><p>最后打开cmd控制台运行ionic serve</p><p>开始享受ionic3带来的改变吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ionic3新特性：&lt;/p&gt;
&lt;h2 id=&quot;Angular-4-0&quot;&gt;&lt;a href=&quot;#Angular-4-0&quot; class=&quot;headerlink&quot; title=&quot;Angular 4.0&quot;&gt;&lt;/a&gt;Angular 4.0&lt;/h2&gt;&lt;p&gt;新的版本下，改进 AOT 编译器，分离 animations 包，缩小生成后的代码量，运行更快，改进ngIf 和ngFor 等具体内容可以访问&lt;a href=&quot;http://angularjs.blogspot.sg/2017/03/angular-400-now-available.html来查看。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://angularjs.blogspot.sg/2017/03/angular-400-now-available.html来查看。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;typescript-2-1-2-2的支持&quot;&gt;&lt;a href=&quot;#typescript-2-1-2-2的支持&quot; class=&quot;headerlink&quot; title=&quot;typescript 2.1, 2.2的支持&quot;&gt;&lt;/a&gt;typescript 2.1, 2.2的支持&lt;/h2&gt;&lt;p&gt;这一次的更新将提升typescript应用构建和类型检查的速度并且引入了对mix-in的支持等具体可以访问&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html来查看。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html来查看。&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/categories/ionic3/"/>
    
    
      <category term="ionic" scheme="https://github.com/alex-0407/tags/ionic/"/>
    
      <category term="ionic3" scheme="https://github.com/alex-0407/tags/ionic3/"/>
    
  </entry>
  
  <entry>
    <title>认识Ionic 2</title>
    <link href="https://github.com/alex-0407/2017/03/06/%E8%AE%A4%E8%AF%86Ionic%202/"/>
    <id>https://github.com/alex-0407/2017/03/06/认识Ionic 2/</id>
    <published>2017-03-06T08:30:11.000Z</published>
    <updated>2018-06-04T01:24:42.055Z</updated>
    
    <content type="html"><![CDATA[<blockquote><hr></blockquote><h2 id="Ionic-2-介绍"><a href="#Ionic-2-介绍" class="headerlink" title="Ionic 2 介绍"></a>Ionic 2 介绍</h2><p>Ionic 2专注于以标准的HTML、CSS和JavaScript来构建移动站点，并可以通过Cordova打包成移动 App，只需编写一次代码，就可以分别部署到iOS、Android等多种移动平台上。这项技术已经帮助很多开发者创建了很多漂亮的 App。现在Ionic 2已经发布了第二代版本，使移动开发更容易、更有效率。</p><p>Ionic 2与一代相比有较大的变化，基于最新的Angular 2，使用TypeScript进行开发，如果您没有接触过 AngularJS或Ionic1.x，完全不用担心，直接从Ionic 2` 开始学习即可。</p><p>在使用Ionic 2之前，您应该具备HTML、CSS、JavaScript基础。</p><hr> <a id="more"></a><h2 id="2-Ionic2-的优势与不足"><a href="#2-Ionic2-的优势与不足" class="headerlink" title="2. Ionic2 的优势与不足"></a>2. Ionic2 的优势与不足</h2><p>Ionic 2借助Angular 2的革命性改进，与 1.x 版本相比具有以下优势：</p><h3 id="更快的性能"><a href="#更快的性能" class="headerlink" title="更快的性能"></a>更快的性能</h3><p>Angular 1的检测机制在某些场景下会导致性能降低，由于最初的架构限制已经很难进行提升了。Angular 2有效避免了这种情况。数据显示Angular 2比Angular 1快5到10倍。</p><p>官方提供了一个动画来展示Ionic 2的性能提升：</p><p>因图片较大，请点击查看:</p><p><a href="http://blog.ionic.io/wp-content/uploads/2016/09/beta11-vs-beta12.gif" target="_blank" rel="noopener">http://blog.ionic.io/wp-content/uploads/2016/09/beta11-vs-beta12.gif</a></p><h3 id="更清晰的项目结构"><a href="#更清晰的项目结构" class="headerlink" title="更清晰的项目结构"></a>更清晰的项目结构</h3><p>Angualr 2应用是模块化的，因此Ionic 2的项目结构比Ionic 1更为清晰，如：</p><p>-home.page</p><p>–home.page.ts</p><p>–home.page.html</p><p>–home.page.scss</p><p>-about.page</p><p>–about.page.ts</p><p>–about.page.html</p><p>–about.page.scss</p><p>每个页面的代码、模板、样式都放在一块，意义非常清晰。</p><h3 id="更强大的CLI"><a href="#更强大的CLI" class="headerlink" title="更强大的CLI"></a>更强大的CLI</h3><p>Ionic CLI提供了更强大的功能，如添加一个页面，可以使用以下命令：</p><p>ionic g page NewPage</p><p>Ionic CLI会生成以下的文件，并且文件中已经生成了基本的代码：</p><p>-new-page</p><p>–new-page.ts</p><p>–new-page.html</p><p>–new-page.scss</p><p>Ionic CLI可以生成pages,providers,tabs,pipes,components，directives等。</p><h3 id="更友好的页面导航"><a href="#更友好的页面导航" class="headerlink" title="更友好的页面导航"></a>更友好的页面导航</h3><p>Ionic 2 的导航方式相比一代有了巨大的改进，完全进行了重写。在 Ionic 1.x 中，需要配置路由：</p><p>.config(function($stateProvider, $urlRouterProvider){     $stateProvider         .state(‘home’, {             url:’/‘,             templateUrl:’templates/home.html’,             controller:’HomeCtrl’})         .state(‘main’, {             url:’/main’,             templateUrl:’templates/main.html’,             controller:’MainCtrl’});     $urlRouterProvider.otherwise(“/“); });</p><p>Ionic 2抛弃了这种繁琐的方式，更类似原生的开发体验，一行代码即可搞定：</p><p>this.nav.push(SecondPage);</p><p>使用全新的NavController组件，导航栈的操作方式更加方便，实现前进、后退等功能就像操作数组那么简单。</p><h3 id="更强大的模板语法"><a href="#更强大的模板语法" class="headerlink" title="更强大的模板语法"></a>更强大的模板语法</h3><p>Angular 2的模板语法刚接触时可能会觉得有点难以上手，但熟悉之后就能够更加灵活的控制单向绑定、双向绑定、事件绑定等各种功能。</p><p>更高效的开发体验</p><p>基于TypeScript，使用Ionic 2拥有更好的开发体验，支持类、模块、接口、lambda表达式等新的特性，大大改善了JavaScript的开发体验。当然你需要一个好的编辑器，如VS Code。</p><p>强大的智能感知，自定义的类都可以哦，真的有点开发强类型语言的感觉啊 8-)</p><p>当然，因为最终还是要依靠Cordova进行打包，因此不可避免的会遇到所有Cordova类跨平台应用面临的问题，在某些性能较差的移动设备上渲染速度较慢。Ionic 2已经明确提出不支持低版本Android设备，并且在Angular 2正式版发布以后，支持AoT编译也会在一定程度上优化 App 性能。</p><h2 id="3-Ionic-2-开发基础"><a href="#3-Ionic-2-开发基础" class="headerlink" title="3. Ionic 2 开发基础"></a>3. Ionic 2 开发基础</h2><p>在开始学习ionic2之前最好能熟悉HTML、CSS及JavaScript，初步了解TypeScript、Angular 2的基础知识，如果了解不深入也没关系，Ionic 2已经为我们隐藏了很多底层的细节，封装的方法意义都很清晰，我们会在实践中，逐步掌握那些奇怪的标签。</p><p>Ionic 2基于Angular 2进行构建，这是对于原始版本完全的重写。一些语法和架构都有了变化，开发者需要注意。在Ionic 1中使用的views和controllers等，在Ionic 2中都被合并到了一块。</p><p>TypeScript是由微软开发的开源语言，是JavaScript的超集，兼容JavaScript。提供了静态类型、Lambda表达式、接口等先进的概念，可以说是面向对象的JavaScript。2012年10月第一次发行公开版本，目前已经发布了2.0正式版。开发者是大名鼎鼎的Delphi和.NET之父：安德斯·海尔斯(Anders Hejlsberg)。上次大神来华时有幸见过一次，非常和蔼可亲。</p><p>AngularJS是由谷歌推出的一款优秀的前端框架，被用于谷歌公司的多款产品中。AngularJS提供了MVVM、模块化、双向绑定、语义化标签、依赖注入等先进思想。AngularJS 诞生于2009年，但是1.x版本在性能上存在诸多问题，谷歌继续发布了颠覆性的Angular 2，目前已经发布了2.0正式版。Angular 2的设计思路与1.x版本是有较大区别的，采用了TypeScript进行开发，因此如果之前没有接触过Angular 1.x的话，可以完全从Angular 2开始。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Ionic-2-介绍&quot;&gt;&lt;a href=&quot;#Ionic-2-介绍&quot; class=&quot;headerlink&quot; title=&quot;Ionic 2 介绍&quot;&gt;&lt;/a&gt;Ionic 2 介绍&lt;/h2&gt;&lt;p&gt;Ionic 2专注于以标准的HTML、CSS和JavaScript来构建移动站点，并可以通过Cordova打包成移动 App，只需编写一次代码，就可以分别部署到iOS、Android等多种移动平台上。这项技术已经帮助很多开发者创建了很多漂亮的 App。现在Ionic 2已经发布了第二代版本，使移动开发更容易、更有效率。&lt;/p&gt;
&lt;p&gt;Ionic 2与一代相比有较大的变化，基于最新的Angular 2，使用TypeScript进行开发，如果您没有接触过 AngularJS或Ionic1.x，完全不用担心，直接从Ionic 2` 开始学习即可。&lt;/p&gt;
&lt;p&gt;在使用Ionic 2之前，您应该具备HTML、CSS、JavaScript基础。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="ionic2" scheme="https://github.com/alex-0407/categories/ionic2/"/>
    
    
      <category term="ionic" scheme="https://github.com/alex-0407/tags/ionic/"/>
    
      <category term="ionic2" scheme="https://github.com/alex-0407/tags/ionic2/"/>
    
  </entry>
  
  <entry>
    <title>nodejs快速搭建web服务</title>
    <link href="https://github.com/alex-0407/2016/10/25/nodejs%E6%90%AD%E5%BB%BAweb%E6%9C%8D%E5%8A%A1/"/>
    <id>https://github.com/alex-0407/2016/10/25/nodejs搭建web服务/</id>
    <published>2016-10-25T07:35:40.000Z</published>
    <updated>2018-06-01T08:38:02.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装、"><a href="#安装、" class="headerlink" title="安装、"></a>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a>、<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a></h2><p>安装成功之后，使用命令测试是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ node -v</span><br><span class="line"></span><br><span class="line">v6.10.2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm -v</span><br><span class="line"></span><br><span class="line">5.3.0</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="初始化项目配置"><a href="#初始化项目配置" class="headerlink" title="初始化项目配置"></a>初始化项目配置</h2><p>在<code>chat</code>文件夹下执行初始化命令来获取package.json文件，如果你自己能记住也是可以手写的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm init</span><br><span class="line"></span><br><span class="line">package name: (20171022)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to C:\Users\Administrator\Desktop\20171022\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"20171022"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="web服务需要引用的模块"><a href="#web服务需要引用的模块" class="headerlink" title="web服务需要引用的模块"></a>web服务需要引用的模块</h2><h3 id="http模块-http协议"><a href="#http模块-http协议" class="headerlink" title="http模块(http协议)"></a>http模块(http协议)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install http --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Node中提供了http模块，其中封装了高效的http服务器和http客户端<br>http.server是一个基于事件的HTTP服务器，内部是由c++实现的，接口由JavaScript封装<br>http.request是一个HTTP客户端工具。用户向服务器发送数据。</p><footer><strong>@Helios_nannan</strong><cite><a href="http://blog.csdn.net/woshinannan741/article/details/51357464" target="_blank" rel="noopener">blog.csdn.net/woshinannan741/article/details/51357464</a></cite></footer></blockquote><h3 id="url模块-url解析"><a href="#url模块-url解析" class="headerlink" title="url模块(url解析)"></a>url模块(url解析)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install url --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>This module has utilities for URL resolution and parsing meant to have feature parity with node.js core url module.</p><footer><strong>@npm</strong><cite><a href="https://www.npmjs.com/package/url" target="_blank" rel="noopener">www.npmjs.com/package/url</a></cite></footer></blockquote><h3 id="fs模块-文件系统"><a href="#fs模块-文件系统" class="headerlink" title="fs模块(文件系统)"></a>fs模块(文件系统)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install fs --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Node.js 文件系统封装在 fs 模块是中，它提供了文件的读取、写入、更名、删除、遍历目录、链接等POSIX 文件系统操作。</p><p>与其他模块不同的是，fs 模块中所有的操作都提供了异步的和 同步的两个版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。我们以几个函数为代表，介绍 fs 常用的功能，并列出 fs 所有函数 的定义和功能。</p><footer><strong>@平凡</strong><cite><a href="http://www.cnblogs.com/pingfan1990/p/4707317.html" target="_blank" rel="noopener">www.cnblogs.com/pingfan1990/p/4707317.html</a></cite></footer></blockquote><h3 id="path模块-路径解析"><a href="#path模块-路径解析" class="headerlink" title="path模块(路径解析)"></a>path模块(路径解析)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install path --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>This is an exact copy of the NodeJS ’path’ module published to the NPM registry.</p><footer><strong>@npm</strong><cite><a href="https://www.npmjs.com/package/path" target="_blank" rel="noopener">www.npmjs.com/package/path</a></cite></footer></blockquote><h2 id="构建一个基于nodejs的web服务器"><a href="#构建一个基于nodejs的web服务器" class="headerlink" title="构建一个基于nodejs的web服务器"></a>构建一个基于nodejs的web服务器</h2><p>新建一个<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个<code>webserver.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line">http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 解析请求，包括文件名</span></span><br><span class="line">   <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 输出请求的文件名</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 从文件系统中读取请求的文件内容</span></span><br><span class="line">   fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(err);</span><br><span class="line">         <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></span><br><span class="line">         <span class="comment">// Content Type: text/plain</span></span><br><span class="line">         response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="comment">// HTTP 状态码: 200 : OK</span></span><br><span class="line">         <span class="comment">// Content Type: text/plain</span></span><br><span class="line">         response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 响应文件内容</span></span><br><span class="line">         response.write(data.toString());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//  发送响应数据</span></span><br><span class="line">      response.end();</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8081</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台会输出以下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8081/'</span>);</span><br></pre></td></tr></table></figure><p>安装用到的模块到本地项目中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install path --save-dev</span><br><span class="line"></span><br><span class="line">$ npm install fs --save-dev</span><br><span class="line"></span><br><span class="line">$ npm install http --save-dev</span><br><span class="line"></span><br><span class="line">$ npm install url --save-dev</span><br></pre></td></tr></table></figure><p>安装成功之后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ node webserver</span><br></pre></td></tr></table></figure><p>在浏览器起中打开：<a href="http://127.0.0.1:8081/" target="_blank" rel="noopener">http://127.0.0.1:8081/</a> 即可查看效果：</p><img src="/blog/img/nodejs搭建web服务/001.png"><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><blockquote><p>Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.</p><footer><strong>@express</strong><cite><a href="http://expressjs.com/" target="_blank" rel="noopener">expressjs.com</a></cite></footer></blockquote><p>express API地址：<a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="noopener">http://www.expressjs.com.cn/4x/api.html</a></p><p>创建一个文件夹<code>express+nodejs</code>，执行初始化项目操作，在项目上安装<code>express</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install express --save</span><br></pre></td></tr></table></figure><p>并且新建<code>index.js</code>、<code>index.html</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello world2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在命令行中执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ node index</span><br></pre></td></tr></table></figure></p><p>如果提示<code>listen EADDRINUSE :::3000</code>就说明端口被占用了，可以换成其他端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Error: listen EADDRINUSE :::3000</span><br><span class="line">    at Object.exports._errnoException (util.js:1018:11)</span><br><span class="line">    at exports._exceptionWithHostPort (util.js:1041:20)</span><br><span class="line">    at Server._listen2 (net.js:1262:14)</span><br><span class="line">    at listen (net.js:1298:10)</span><br><span class="line">    at Server.listen (net.js:1394:5)</span><br><span class="line">    at EventEmitter.listen (E:\工作\workpace\Express\node_modules\express\lib\application.js:618:24)</span><br><span class="line">    at Object.&lt;anonymous&gt; (E:\工作\workpace\Express\index.js:8:5)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br></pre></td></tr></table></figure><p>在浏览器中打开 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></p><img src="/blog/img/nodejs搭建web服务/002.png"><h3 id="使用Express加载模版并输出数据"><a href="#使用Express加载模版并输出数据" class="headerlink" title="使用Express加载模版并输出数据"></a>使用Express加载模版并输出数据</h3><p>未完待续……</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装、&quot;&gt;&lt;a href=&quot;#安装、&quot; class=&quot;headerlink&quot; title=&quot;安装、&quot;&gt;&lt;/a&gt;安装&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;安装成功之后，使用命令测试是否成功：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ node -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v6.10.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.3.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web" scheme="https://github.com/alex-0407/categories/Web/"/>
    
    
      <category term="Nodejs" scheme="https://github.com/alex-0407/tags/Nodejs/"/>
    
      <category term="Express" scheme="https://github.com/alex-0407/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>一行代码搭建Hexo站点</title>
    <link href="https://github.com/alex-0407/2016/10/23/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BAHexo%E7%AB%99%E7%82%B9/"/>
    <id>https://github.com/alex-0407/2016/10/23/一行代码搭建Hexo站点/</id>
    <published>2016-10-23T07:32:14.000Z</published>
    <updated>2018-06-01T08:37:50.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化Hexo模版引擎"><a href="#初始化Hexo模版引擎" class="headerlink" title="初始化Hexo模版引擎"></a>初始化Hexo模版引擎</h2>一行代码快速搭建Hexo.NexT主题网站，come on，一起来搭建自己的专属blog吧！<h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><p>进入本机E盘，新建blog目录</p><ul><li>第一步，安装hexo环境</li><li>第二步，安装下载<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>模版，即初始化<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>模版</li><li>第三步，进入blog文件夹，执行安装依赖包</li><li>第四步，启动<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>服务</li><li>第五步，在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line">cd blog</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">hexo server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你没有安装npm，请先执行下载<a href="https://www.npmjs.com/" target="_blank" rel="noopener">安装</a></p><p>安装成功执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行以上步骤之后在浏览器中键入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到一个初始状态的模版</p><img src="/blog/img/一行代码搭建hexo站点/01.jpg"><h3 id="修改测试端口号"><a href="#修改测试端口号" class="headerlink" title="修改测试端口号"></a>修改测试端口号</h3><p>如果需要修改端口4000，可以在node-modules文件夹下找到hexo-server模块中的index.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/* global hexo */</span><br><span class="line"></span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var assign = require(&apos;object-assign&apos;);</span><br><span class="line"></span><br><span class="line">hexo.config.server = assign(&#123;</span><br><span class="line">  port: 5000,//自行修改端口号</span><br><span class="line">  log: false,</span><br><span class="line">  ip: &apos;0.0.0.0&apos;,</span><br><span class="line">  compress: false,</span><br><span class="line">  header: true</span><br><span class="line">&#125;, hexo.config.server);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改之后重新执行hexo server即可:</p><img src="/blog/img/一行代码搭建hexo站点/02.jpg"><h2 id="网站基础配置"><a href="#网站基础配置" class="headerlink" title="网站基础配置"></a>网站基础配置</h2><h3 id="显示或隐藏Menu菜单"><a href="#显示或隐藏Menu菜单" class="headerlink" title="显示或隐藏Menu菜单"></a>显示或隐藏Menu菜单</h3><p>在修改菜单之前你首先要弄清楚当前网站使用的皮肤是哪一个，打开网站根目录 <code>config_yml</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: landscape</span><br></pre></td></tr></table></figure></p><p>其中<code>landscape</code>就是你的皮肤框架</p><p>然后在网站根目录找到<code>themes/landscape</code>这里面就会有你菜单想的配置，同时这里面也有一个 <code>config_yml</code>，为了区分，我们索性把站点下的配置文件称为<code>站点配置yml</code>，皮肤框架下的配置文件称之为<code>皮肤配置yml</code></p><p>OK，打开<code>皮肤配置yml</code>你会看到一些简短的配置，其中第一条就是我们的菜单栏配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Header</span></span><br><span class="line">menu:</span><br><span class="line">  Home: /</span><br><span class="line">  Archives: /archives</span><br></pre></td></tr></table></figure><p>修改<code>Home</code>为<code>主菜单</code>，修改<code>Archives</code>为 <code>文章</code>，刷新浏览器<a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> 即可看到效果</p><h3 id="配置站点基础信息"><a href="#配置站点基础信息" class="headerlink" title="配置站点基础信息"></a>配置站点基础信息</h3><p>打开<code>站点配置yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">author: 作者</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>刷新浏览器 <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a><br><img src="/blog/img/一行代码搭建hexo站点/03.jpg"></p><h3 id="设置rss"><a href="#设置rss" class="headerlink" title="设置rss"></a>设置rss</h3><p>在站点根目录执行安装hexo-generator-feed</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install hexo-generator-feed  --save-dev</span><br></pre></td></tr></table></figure><p>在<code>站点配置yml</code>中配置插件，为了快速的找到配置项，可以放到文件的结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">plugins: hexo-generator-feed</span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom <span class="comment">##feed类型 atom或者rss2</span></span><br><span class="line">  path: atom.xml <span class="comment">##feed路径</span></span><br><span class="line">  <span class="built_in">limit</span>: 20  <span class="comment">##feed文章最小数量</span></span><br></pre></td></tr></table></figure><p>点击RSS按钮，会出现如下提示，前提是你的浏览器有rss功能，我本地使用的是<code>rss feed reader</code>：</p><img src="/blog/img/一行代码搭建hexo站点/04.jpg"><h3 id="设置本地全局搜索"><a href="#设置本地全局搜索" class="headerlink" title="设置本地全局搜索"></a>设置本地全局搜索</h3><p>安装下载hexo-generator-searchdb模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install hexo-generator-searchdb --save-dev</span><br></pre></td></tr></table></figure></p><p><code>站点配置yml</code>需要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure><p><code>皮肤配置yml</code>需要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当然你会发现并没有起作用，这是因为当前<code>landscape</code>并不支持本地搜索，后续将介绍<code>NexT</code>主题</p><h3 id="使用命令生成静态文件"><a href="#使用命令生成静态文件" class="headerlink" title="使用命令生成静态文件"></a>使用命令生成静态文件</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。生成的文件在网站<code>public</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><p>可缩写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h2 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h2><h3 id="下载安装NexT模版"><a href="#下载安装NexT模版" class="headerlink" title="下载安装NexT模版"></a>下载安装NexT模版</h3><p>在github上<a href="https://github.com/xulayen/hexo-theme-next">下载</a>NexT主题源码</p><p>把<code>NexT</code>主题源码的源码整个复制到你的站点目录下的<code>themes/next</code>目录下</p><h3 id="修改站点配置yml来更改主题"><a href="#修改站点配置yml来更改主题" class="headerlink" title="修改站点配置yml来更改主题"></a>修改<code>站点配置yml</code>来更改主题</h3><p>文章上面有讲到，当前我们的主题使用的是<code>landscape</code>需要修改为<code>next</code></p><p>重新启动服务</p><p>刷新页面查看效果</p><img src="/blog/img/一行代码搭建hexo站点/05.png"><h3 id="学习并使用NexT主题配置"><a href="#学习并使用NexT主题配置" class="headerlink" title="学习并使用NexT主题配置"></a>学习并使用NexT主题配置</h3><p>打开<code>next</code>的<code>皮肤配置yml</code>，你会看到很多我们不明白的配置项，根据注释可以读出其中配置的含义。</p><h4 id="根据语言配置菜单栏语言"><a href="#根据语言配置菜单栏语言" class="headerlink" title="根据语言配置菜单栏语言"></a>根据语言配置菜单栏语言</h4><p>打开<code>next皮肤配置yml</code>文件，找到<code>languages</code>文件夹</p><img src="/blog/img/一行代码搭建hexo站点/06.png"><p>点开<code>zh-Hans.yml</code>其中的配置项就是已经翻译的文本，网站会根据你<code>站点配置yml</code>中的语言配置来去读取对应的语言文件</p><p>打开你<code>next皮肤配置yml</code>你会看到菜单栏基础配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: <span class="regexp">/ || home</span></span><br><span class="line"><span class="regexp">  #about: /</span>about/ || user</span><br><span class="line">  #tags: /tags/ || tags</span><br><span class="line">  #categories: /categories/ || th</span><br><span class="line">  archives: <span class="regexp">/archives/</span> || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>发现<code>home</code>和<code>archives</code>菜单是开启的，现在我们全部开启，只需要去掉前面的<code>#</code>，刷新浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: <span class="regexp">/ || home</span></span><br><span class="line"><span class="regexp">  about: /</span>about/ || user</span><br><span class="line">  tags: <span class="regexp">/tags/</span> || tags</span><br><span class="line">  categories: <span class="regexp">/categories/</span> || th</span><br><span class="line">  archives: <span class="regexp">/archives/</span> || archive</span><br><span class="line">  schedule: <span class="regexp">/schedule/</span> || calendar</span><br><span class="line">  sitemap: <span class="regexp">/sitemap.xml || sitemap</span></span><br><span class="line"><span class="regexp">  commonweal: /</span><span class="number">404</span>/ || heartbeat</span><br></pre></td></tr></table></figure><p>尝试修改<code>站点配置yml</code>语言，重启服务后刷新浏览器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">language: zh-tw</span><br></pre></td></tr></table></figure><img src="/blog/img/一行代码搭建hexo站点/07.jpg"><h4 id="配置站内搜索"><a href="#配置站内搜索" class="headerlink" title="配置站内搜索"></a>配置站内搜索</h4><p>安装下载hexo-generator-searchdb模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install hexo-generator-searchdb --save-dev</span><br></pre></td></tr></table></figure></p><p><code>站点配置yml</code>需要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure><p><code>皮肤配置yml</code>需要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="配置rss"><a href="#配置rss" class="headerlink" title="配置rss"></a>配置rss</h4><p>配置同见 2.3. 设置rss</p><h4 id="配置标签-tags"><a href="#配置标签-tags" class="headerlink" title="配置标签(tags)"></a>配置标签(tags)</h4><p>添加标签其实就是在你的<code>source</code>文件夹下新建一个page页面而已，比如菜单上的<code>tags</code>和<code>about</code>或者<code>categories</code>都是一样的，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><p>会在<code>source</code>目录下生成一个对应的文件夹，其中有<code>index.md</code>文件，打开会看到一些基础配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-10-24 12:02:51</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="配置分类-categories"><a href="#配置分类-categories" class="headerlink" title="配置分类(categories)"></a>配置分类(categories)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><p>会在<code>source</code>目录下生成一个对应的文件夹，其中有<code>index.md</code>文件，打开会看到一些基础配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2017-10-24 12:02:51</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="配置站点基础信息-1"><a href="#配置站点基础信息-1" class="headerlink" title="配置站点基础信息"></a>配置站点基础信息</h4><h5 id="配置头像"><a href="#配置头像" class="headerlink" title="配置头像"></a>配置头像</h5><p>在<code>next皮肤配置yml</code>中可以配置远程地址，也可以是本地资源地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line">avatar: 头像地址</span><br></pre></td></tr></table></figure><h5 id="配置站点描述"><a href="#配置站点描述" class="headerlink" title="配置站点描述"></a>配置站点描述</h5><p>在<code>站点配置yml</code>文件中，找到<code>menu/description</code>就是当前站点的描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">description: 站点描述</span><br></pre></td></tr></table></figure><h5 id="配置第三方跳转链接"><a href="#配置第三方跳转链接" class="headerlink" title="配置第三方跳转链接"></a>配置第三方跳转链接</h5><p>在<code>next皮肤配置yml</code>中，找到<code>social</code>配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/yourname || github</span><br><span class="line">  E-Mail: mailto:yourname@163.com || envelope</span><br><span class="line">  QQ: http://wpa.qq.com/msgrd?v=3&amp;uin=yourqq&amp;site=在线客服&amp;menu=yes || qq</span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br></pre></td></tr></table></figure><h5 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h5><p>在<code>next皮肤配置yml</code>中，找到<code>links</code>配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">links_icon: link</span><br><span class="line">links_title: Links</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  friend1:</span><br><span class="line">  friend2:</span><br><span class="line">  friend3:</span><br></pre></td></tr></table></figure><h4 id="配置阅读次数（使用第三方服务）"><a href="#配置阅读次数（使用第三方服务）" class="headerlink" title="配置阅读次数（使用第三方服务）"></a>配置阅读次数（使用第三方服务）</h4><p><code>leancloud</code>作为装逼神器确实不错，可以随意修改当前文章的阅读次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="comment"># 使用第三方服务 LeanCloud 查看文章阅读量</span></span><br><span class="line">leancloud_visitors:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  app_id:</span><br><span class="line">  app_key:</span><br></pre></td></tr></table></figure><h4 id="配置评论（使用第三方服务）"><a href="#配置评论（使用第三方服务）" class="headerlink" title="配置评论（使用第三方服务）"></a>配置评论（使用第三方服务）</h4><p>在disqus官网 <a href="http://www.disqus.com" target="_blank" rel="noopener">http://www.disqus.com</a> 注册一个帐号添加应用之后可获得一个名称，作为你的shortname</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line">disqus:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  shortname: 你的名称</span><br><span class="line">  count: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="配置站点统计（使用第三方服务）"><a href="#配置站点统计（使用第三方服务）" class="headerlink" title="配置站点统计（使用第三方服务）"></a>配置站点统计（使用第三方服务）</h4><p>百度站点统计 <a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">http://tongji.baidu.com/web/welcome/login</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="comment"># 注意： baidu_analytics 不是你的百度 id 或者 百度统计 id</span></span><br><span class="line">baidu_analytics: 327573ae29bff3e49a0152fd0be5e1c2</span><br></pre></td></tr></table></figure><h4 id="当前文章是否启用评论配置"><a href="#当前文章是否启用评论配置" class="headerlink" title="当前文章是否启用评论配置"></a>当前文章是否启用评论配置</h4><p>如果不需要当前页面或这文章不启用评论，则只需要添加以下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: <span class="number">2017</span><span class="number">-10</span><span class="number">-24</span> <span class="number">12</span>:<span class="number">02</span>:<span class="number">51</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><h4 id="在每个文章的最后加上版权声明"><a href="#在每个文章的最后加上版权声明" class="headerlink" title="在每个文章的最后加上版权声明"></a>在每个文章的最后加上版权声明</h4><ul><li>新建 passage-end-tag.swig 文件</li></ul><p>在路径 <code>\themes\next\layout\_macro</code>中添加<code>passage-end-tag.swig</code>文件，其内容可以自定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.passage_end_tag.enabled %&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span><br><span class="line">------ 本文结束 ------&lt;/div&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul class=<span class="string">"post-copyright"</span> style=<span class="string">"margin: 2em 0 0; padding: 0.5em 1em;border-left: 3px solid #ff1700;background-color: #f9f9f9;list-style: none; "</span>&gt;</span><br><span class="line">  &lt;li class=<span class="string">"post-copyright-author"</span>&gt;</span><br><span class="line">    &lt;strong&gt;本文作者：&lt;/strong&gt;</span><br><span class="line">    Alex</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=<span class="string">"post-copyright-license"</span>&gt;</span><br><span class="line">    &lt;strong&gt;版权声明： &lt;/strong&gt;</span><br><span class="line">    本博客所有文章除特别声明外，转载请注明出处！</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li>修改 post.swig 文件<br>在<code>\themes\next\layout\_macro\post.swig</code>中，<code>post-body</code>之后，<code>post-footer</code>之前添:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">  &#123;% include <span class="string">'passage-end-tag.swig'</span> %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>next主题配置yml</code>中添加字段</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>跟着我的步骤可以很快的搭建一个属于自己的博客站点，当然<code>hexo.next</code>远远不知这些配置项，有兴趣的同学可以自己看看里面的配置。<br>这篇文章为什么叫一行代码搭建hexo博客呢，哈哈哈，不这样也不会有人看哇，懂hexo的人就不用看了，高手勿喷~另外可以使用翻墙软件在下方评论，写下你想说的话，没有翻墙的，可以直接在<code>站点概述</code>中qq我或者e-mail我都可以。<br>祝，早新手早日玩转hexo博客，这是 <a href="http://xulayen.imwork.net/" target="_blank" rel="noopener">博主</a> 的博客，文章不定期更新</p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官网地址</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始化Hexo模版引擎&quot;&gt;&lt;a href=&quot;#初始化Hexo模版引擎&quot; class=&quot;headerlink&quot; title=&quot;初始化Hexo模版引擎&quot;&gt;&lt;/a&gt;初始化Hexo模版引擎&lt;/h2&gt;
一行代码快速搭建Hexo.NexT主题网站，come on，一起来搭建自己的专属blog吧！

&lt;h3 id=&quot;执行安装&quot;&gt;&lt;a href=&quot;#执行安装&quot; class=&quot;headerlink&quot; title=&quot;执行安装&quot;&gt;&lt;/a&gt;执行安装&lt;/h3&gt;&lt;p&gt;进入本机E盘，新建blog目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，安装hexo环境&lt;/li&gt;
&lt;li&gt;第二步，安装下载&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;模版，即初始化&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;模版&lt;/li&gt;
&lt;li&gt;第三步，进入blog文件夹，执行安装依赖包&lt;/li&gt;
&lt;li&gt;第四步，启动&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;服务&lt;/li&gt;
&lt;li&gt;第五步，在浏览器中打开&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:4000/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="https://github.com/alex-0407/categories/Web/"/>
    
    
      <category term="Hexo" scheme="https://github.com/alex-0407/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://github.com/alex-0407/tags/NexT/"/>
    
  </entry>
  
</feed>
